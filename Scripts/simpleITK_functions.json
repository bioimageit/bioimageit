{
    "Abs:_image1": {
        "name": "Abs",
        "function_name": "Abs",
        "description": "Computes the absolute value of each pixel.\n\\ This function directly calls the execute method of AbsImageFilter in order to support a procedural API\nSee also\nitk::simple::AbsImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AbsoluteValueDifference:_image1_image2": {
        "name": "AbsoluteValueDifference:_image1_image2",
        "function_name": "AbsoluteValueDifference",
        "description": "Implements pixel-wise the computation of absolute value difference.\n\\ This function directly calls the execute method of AbsoluteValueDifferenceImageFilter in order to support a procedural API\nSee also\nitk::simple::AbsoluteValueDifferenceImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AbsoluteValueDifference:_image1_constant": {
        "name": "AbsoluteValueDifference:_image1_constant",
        "function_name": "AbsoluteValueDifference",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AbsoluteValueDifference:_constant_image2": {
        "name": "AbsoluteValueDifference:_constant_image2",
        "function_name": "AbsoluteValueDifference",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Acos:_image1": {
        "name": "Acos",
        "function_name": "Acos",
        "description": "Computes the inverse cosine of each pixel.\n\\ This function directly calls the execute method of AcosImageFilter in order to support a procedural API\nSee also\nitk::simple::AcosImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AdaptiveHistogramEqualization:_image1_radius_alpha_beta": {
        "name": "AdaptiveHistogramEqualization",
        "function_name": "AdaptiveHistogramEqualization",
        "description": "Power Law Adaptive Histogram Equalization.\n\\ This function directly calls the execute method of AdaptiveHistogramEqualizationImageFilter in order to support a procedural API\nSee also\nitk::simple::AdaptiveHistogramEqualizationImageFilter for the object oriented interface\nExamples\nSliceBySliceDecorator/SliceBySliceDecorator.cxx.",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "alpha",
                "default": 0.3,
                "type": "float"
            },
            {
                "name": "beta",
                "default": 0.3,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Add:_image1_image2": {
        "name": "Add:_image1_image2",
        "function_name": "Add",
        "description": "Pixel-wise addition of two images.\n\\ This function directly calls the execute method of AddImageFilter in order to support a procedural API\nSee also\nitk::simple::AddImageFilter for the object oriented interface\nReferenced by operator+(), and operator+=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Add:_image1_constant": {
        "name": "Add:_image1_constant",
        "function_name": "Add",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Add:_constant_image2": {
        "name": "Add:_constant_image2",
        "function_name": "Add",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AdditiveGaussianNoise:_image1_standardDeviation_mean_seed": {
        "name": "AdditiveGaussianNoise",
        "function_name": "AdditiveGaussianNoise",
        "description": "Alter an image with additive Gaussian white noise.\n\\ This function directly calls the execute method of AdditiveGaussianNoiseImageFilter in order to support a procedural API\nSee also\nitk::simple::AdditiveGaussianNoiseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "standardDeviation",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "mean",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "seed",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AggregateLabelMap:_image1": {
        "name": "AggregateLabelMap",
        "function_name": "AggregateLabelMap",
        "description": "Collapses all labels into the first label.\n\\ This function directly calls the execute method of AggregateLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::AggregateLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "And:_image1_image2": {
        "name": "And:_image1_image2",
        "function_name": "And",
        "description": "Implements the AND bitwise operator pixel-wise between two images.\n\\ This function directly calls the execute method of AndImageFilter in order to support a procedural API\nSee also\nitk::simple::AndImageFilter for the object oriented interface\nReferenced by operator&(), and operator&=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "And:_image1_constant": {
        "name": "And:_image1_constant",
        "function_name": "And",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "And:_constant_image2": {
        "name": "And:_constant_image2",
        "function_name": "And",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "int"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AntiAliasBinary:_image1_maximumRMSError_numberOfIterations": {
        "name": "AntiAliasBinary",
        "function_name": "AntiAliasBinary",
        "description": "A method for estimation of a surface from a binary volume.\n\\ This function directly calls the execute method of AntiAliasBinaryImageFilter in order to support a procedural API\nSee also\nitk::simple::AntiAliasBinaryImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximumRMSError",
                "default": 0.07,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ApproximateSignedDistanceMap:_image1_insideValue_outsideValue": {
        "name": "ApproximateSignedDistanceMap",
        "function_name": "ApproximateSignedDistanceMap",
        "description": "Create a map of the approximate signed distance from the boundaries of a binary image.\n\\ This function directly calls the execute method of ApproximateSignedDistanceMapImageFilter in order to support a procedural API\nSee also\nitk::simple::ApproximateSignedDistanceMapImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": "",
                "type": "float"
            },
            {
                "name": "outsideValue",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AreaClosing:_image1_lambda_useImageSpacing_fullyConnected": {
        "name": "AreaClosing",
        "function_name": "AreaClosing",
        "description": "Morphological closing by attributes.\n\\ This function directly calls the execute method of AreaClosingImageFilter in order to support a procedural API\nSee also\nitk::simple::AreaClosingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lambda",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "AreaOpening:_image1_lambda_useImageSpacing_fullyConnected": {
        "name": "AreaOpening",
        "function_name": "AreaOpening",
        "description": "Morphological opening by attributes.\n\\ This function directly calls the execute method of AreaOpeningImageFilter in order to support a procedural API\nSee also\nitk::simple::AreaOpeningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lambda",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Asin:_image1": {
        "name": "Asin",
        "function_name": "Asin",
        "description": "Computes the sine of each pixel.\n\\ This function directly calls the execute method of AsinImageFilter in order to support a procedural API\nSee also\nitk::simple::AsinImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Atan:_image1": {
        "name": "Atan",
        "function_name": "Atan",
        "description": "Computes the one-argument inverse tangent of each pixel.\n\\ This function directly calls the execute method of AtanImageFilter in order to support a procedural API\nSee also\nitk::simple::AtanImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Atan2:_image1_image2": {
        "name": "Atan2:_image1_image2",
        "function_name": "Atan2",
        "description": "Computes two argument inverse tangent.\n\\ This function directly calls the execute method of Atan2ImageFilter in order to support a procedural API\nSee also\nitk::simple::Atan2ImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Atan2:_image1_constant": {
        "name": "Atan2:_image1_constant",
        "function_name": "Atan2",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Atan2:_constant_image2": {
        "name": "Atan2:_constant_image2",
        "function_name": "Atan2",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Bilateral:_image1_domainSigma_rangeSigma_numberOfRangeGaussianSamples": {
        "name": "Bilateral",
        "function_name": "Bilateral",
        "description": "Blurs an image while preserving edges.\n\\ This function directly calls the execute method of BilateralImageFilter in order to support a procedural API\nSee also\nitk::simple::BilateralImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "domainSigma",
                "default": 4.0,
                "type": "float"
            },
            {
                "name": "rangeSigma",
                "default": 50.0,
                "type": "float"
            },
            {
                "name": "numberOfRangeGaussianSamples",
                "default": 100,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryClosingByReconstruction:_image1_kernelRadius_kernelType_foregroundValue_fullyConnected": {
        "name": "BinaryClosingByReconstruction",
        "function_name": "BinaryClosingByReconstruction",
        "description": "binary closing by reconstruction of an image.\n\\ This function directly calls the execute method of BinaryClosingByReconstructionImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryClosingByReconstructionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryContour:_image1_fullyConnected_backgroundValue_foregroundValue": {
        "name": "BinaryContour",
        "function_name": "BinaryContour",
        "description": "Labels the pixels on the border of the objects in a binary image.\n\\ This function directly calls the execute method of BinaryContourImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryContourImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryDilate:_image1_kernelRadius_kernelType_backgroundValue_foregroundValue_boundaryToForeground": {
        "name": "BinaryDilate",
        "function_name": "BinaryDilate",
        "description": "Fast binary dilation of a single intensity value in the image.\n\\ This function directly calls the execute method of BinaryDilateImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryDilateImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "boundaryToForeground",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryErode:_image1_kernelRadius_kernelType_backgroundValue_foregroundValue_boundaryToForeground": {
        "name": "BinaryErode",
        "function_name": "BinaryErode",
        "description": "Fast binary erosion of a single intensity value in the image.\n\\ This function directly calls the execute method of BinaryErodeImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryErodeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "boundaryToForeground",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryFillhole:_image1_fullyConnected_foregroundValue": {
        "name": "BinaryFillhole",
        "function_name": "BinaryFillhole",
        "description": "Remove holes not connected to the boundary of the image.\n\\ This function directly calls the execute method of BinaryFillholeImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryFillholeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryGrindPeak:_image1_fullyConnected_foregroundValue_backgroundValue": {
        "name": "BinaryGrindPeak",
        "function_name": "BinaryGrindPeak",
        "description": "Remove the objects not connected to the boundary of the image.\n\\ This function directly calls the execute method of BinaryGrindPeakImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryGrindPeakImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryImageToLabelMap:_image1_fullyConnected_inputForegroundValue_outputBackgroundValue": {
        "name": "BinaryImageToLabelMap",
        "function_name": "BinaryImageToLabelMap",
        "description": "Label the connected components in a binary image and produce a collection of label objects.\n\\ This function directly calls the execute method of BinaryImageToLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::BinaryImageToLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "inputForegroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "outputBackgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryMagnitude:_image1_image2": {
        "name": "BinaryMagnitude",
        "function_name": "BinaryMagnitude",
        "description": "Computes the square root of the sum of squares of corresponding input pixels.\n\\ This function directly calls the execute method of BinaryMagnitudeImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryMagnitudeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryMedian:_image1_radius_foregroundValue_backgroundValue": {
        "name": "BinaryMedian",
        "function_name": "BinaryMedian",
        "description": "Applies a version of the median filter optimized for binary images.\n\\ This function directly calls the execute method of BinaryMedianImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryMedianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryMinMaxCurvatureFlow:_image1_timeStep_numberOfIterations_stencilRadius_threshold": {
        "name": "BinaryMinMaxCurvatureFlow",
        "function_name": "BinaryMinMaxCurvatureFlow",
        "description": "Denoise a binary image using min/max curvature flow.\n\\ This function directly calls the execute method of BinaryMinMaxCurvatureFlowImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryMinMaxCurvatureFlowImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "timeStep",
                "default": 0.05,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 5,
                "type": "int"
            },
            {
                "name": "stencilRadius",
                "default": 2,
                "type": "int"
            },
            {
                "name": "threshold",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryMorphologicalClosing:_image1_kernelRadius_kernelType_foregroundValue_safeBorder": {
        "name": "BinaryMorphologicalClosing",
        "function_name": "BinaryMorphologicalClosing",
        "description": "binary morphological closing of an image.\n\\ This function directly calls the execute method of BinaryMorphologicalClosingImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryMorphologicalClosingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "safeBorder",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryMorphologicalOpening:_image1_kernelRadius_kernelType_backgroundValue_foregroundValue": {
        "name": "BinaryMorphologicalOpening",
        "function_name": "BinaryMorphologicalOpening",
        "description": "binary morphological opening of an image.\n\\ This function directly calls the execute method of BinaryMorphologicalOpeningImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryMorphologicalOpeningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryNot:_image1_foregroundValue_backgroundValue": {
        "name": "BinaryNot",
        "function_name": "BinaryNot",
        "description": "Implements the BinaryNot logical operator pixel-wise between two images.\n\\ This function directly calls the execute method of BinaryNotImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryNotImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryOpeningByReconstruction:_image1_kernelRadius_kernelType_foregroundValue_backgroundValue_fullyConnected": {
        "name": "BinaryOpeningByReconstruction",
        "function_name": "BinaryOpeningByReconstruction",
        "description": "binary morphological closing of an image.\n\\ This function directly calls the execute method of BinaryOpeningByReconstructionImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryOpeningByReconstructionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryProjection:_image1_projectionDimension_foregroundValue_backgroundValue": {
        "name": "BinaryProjection",
        "function_name": "BinaryProjection",
        "description": "Binary projection.\n\\ This function directly calls the execute method of BinaryProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryPruning:_image1_iteration": {
        "name": "BinaryPruning",
        "function_name": "BinaryPruning",
        "description": "This filter removes \"spurs\" of less than a certain length in the input image.\n\\ This function directly calls the execute method of BinaryPruningImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryPruningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "iteration",
                "default": 3,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryReconstructionByDilation:_markerImage_maskImage_backgroundValue_foregroundValue_fullyConnected": {
        "name": "BinaryReconstructionByDilation",
        "function_name": "BinaryReconstructionByDilation",
        "description": "binary reconstruction by dilation of an image\n\\ This function directly calls the execute method of BinaryReconstructionByDilationImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryReconstructionByDilationImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "markerImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryReconstructionByErosion:_markerImage_maskImage_backgroundValue_foregroundValue_fullyConnected": {
        "name": "BinaryReconstructionByErosion",
        "function_name": "BinaryReconstructionByErosion",
        "description": "binary reconstruction by erosion of an image\n\\ This function directly calls the execute method of BinaryReconstructionByErosionImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryReconstructionByErosionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "markerImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryThinning:_image1": {
        "name": "BinaryThinning",
        "function_name": "BinaryThinning",
        "description": "This filter computes one-pixel-wide edges of the input image.\n\\ This function directly calls the execute method of BinaryThinningImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryThinningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryThreshold:_image1_lowerThreshold_upperThreshold_insideValue_outsideValue": {
        "name": "BinaryThreshold",
        "function_name": "BinaryThreshold",
        "description": "Binarize an input image by thresholding.\n\\ This function directly calls the execute method of BinaryThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryThresholdImageFilter for the object oriented interface\nExamples\nHelloWorld/HelloWorld.cxx.",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lowerThreshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upperThreshold",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinaryThresholdProjection:_image1_projectionDimension_thresholdValue_foregroundValue_backgroundValue": {
        "name": "BinaryThresholdProjection",
        "function_name": "BinaryThresholdProjection",
        "description": "BinaryThreshold projection.\n\\ This function directly calls the execute method of BinaryThresholdProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::BinaryThresholdProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            },
            {
                "name": "thresholdValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinomialBlur:_image1_repetitions": {
        "name": "BinomialBlur",
        "function_name": "BinomialBlur",
        "description": "Performs a separable blur on each dimension of an image.\n\\ This function directly calls the execute method of BinomialBlurImageFilter in order to support a procedural API\nSee also\nitk::simple::BinomialBlurImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "repetitions",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BinShrink:_image1_shrinkFactors": {
        "name": "BinShrink",
        "function_name": "BinShrink",
        "description": "Reduce the size of an image by an integer factor in each dimension while performing averaging of an input neighborhood.\n\\ This function directly calls the execute method of BinShrinkImageFilter in order to support a procedural API\nSee also\nitk::simple::BinShrinkImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "shrinkFactors",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BitwiseNot:_image1": {
        "name": "BitwiseNot",
        "function_name": "BitwiseNot",
        "description": "Implements pixel-wise generic operation on one image.\n\\ This function directly calls the execute method of BitwiseNotImageFilter in order to support a procedural API\nSee also\nitk::simple::BitwiseNotImageFilter for the object oriented interface\nReferenced by operator~().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BlackTopHat:_image1_kernelRadius_kernelType_safeBorder": {
        "name": "BlackTopHat",
        "function_name": "BlackTopHat",
        "description": "Black top hat extracts local minima that are smaller than the structuring element.\n\\ This function directly calls the execute method of BlackTopHatImageFilter in order to support a procedural API\nSee also\nitk::simple::BlackTopHatImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "safeBorder",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BoundedReciprocal:_image1": {
        "name": "BoundedReciprocal",
        "function_name": "BoundedReciprocal",
        "description": "Computes 1/(1+x) for each pixel in the image.\n\\ This function directly calls the execute method of BoundedReciprocalImageFilter in order to support a procedural API\nSee also\nitk::simple::BoundedReciprocalImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BoxMean:_image1_radius": {
        "name": "BoxMean",
        "function_name": "BoxMean",
        "description": "Implements a fast rectangular mean filter using the accumulator approach.\n\\ This function directly calls the execute method of BoxMeanImageFilter in order to support a procedural API\nSee also\nitk::simple::BoxMeanImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BoxSigma:_image1_radius": {
        "name": "BoxSigma",
        "function_name": "BoxSigma",
        "description": "Implements a fast rectangular sigma filter using the accumulator approach.\n\\ This function directly calls the execute method of BoxSigmaImageFilter in order to support a procedural API\nSee also\nitk::simple::BoxSigmaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BSplineDecomposition:_image1_splineOrder": {
        "name": "BSplineDecomposition",
        "function_name": "BSplineDecomposition",
        "description": "Calculates the B-Spline coefficients of an image. Spline order may be from 0 to 5.\n\\ This function directly calls the execute method of BSplineDecompositionImageFilter in order to support a procedural API\nSee also\nitk::simple::BSplineDecompositionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "splineOrder",
                "default": 3,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "BSplineTransformInitializer:_image1_transformDomainMeshSize_order": {
        "name": "BSplineTransformInitializer",
        "function_name": "BSplineTransformInitializer",
        "description": "BSplineTransformInitializerFilter is a helper class intended to initialize the control point grid such that it has a physically consistent definition. It sets the transform domain origin, physical dimensions and direction from information obtained from the image. It also sets the mesh size if asked to do so by calling SetTransformDomainMeshSize() before calling InitializeTransform().\nThis function directly calls the execute method of BSplineTransformInitializerFilter in order to support a procedural API\nSee also\nitk::simple::BSplineTransformInitializerFilter for the object oriented interface\nExamples\nImageRegistrationMethodBSpline1/ImageRegistrationMethodBSpline1.cxx, and ImageRegistrationMethodBSpline3/ImageRegistrationMethodBSpline3.cxx.",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transformDomainMeshSize",
                "default": "",
                "type": "str"
            },
            {
                "name": "order",
                "default": 3,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "CannyEdgeDetection:_image1_lowerThreshold_upperThreshold_variance_maximumError": {
        "name": "CannyEdgeDetection",
        "function_name": "CannyEdgeDetection",
        "description": "This filter is an implementation of a Canny edge detector for scalar-valued images.\n\\ This function directly calls the execute method of CannyEdgeDetectionImageFilter in order to support a procedural API\nSee also\nitk::simple::CannyEdgeDetectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lowerThreshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upperThreshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "variance",
                "default": "",
                "type": "str"
            },
            {
                "name": "maximumError",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CannySegmentationLevelSet:_initialImage_featureImage_threshold_variance_maximumRMSError_propagationScaling_curvatureScaling_advectionScaling_numberOfIterations_reverseExpansionDirection_isoSurfaceValue": {
        "name": "CannySegmentationLevelSet",
        "function_name": "CannySegmentationLevelSet",
        "description": "Segments structures in images based on image features derived from pseudo-canny-edges.\n\\ This function directly calls the execute method of CannySegmentationLevelSetImageFilter in order to support a procedural API\nSee also\nitk::simple::CannySegmentationLevelSetImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "initialImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "threshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "variance",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "maximumRMSError",
                "default": 0.02,
                "type": "float"
            },
            {
                "name": "propagationScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "curvatureScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "advectionScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            },
            {
                "name": "reverseExpansionDirection",
                "default": false,
                "type": "bool"
            },
            {
                "name": "isoSurfaceValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Cast:_image_pixelID": {
        "name": "Cast",
        "function_name": "Cast",
        "description": "Examples\nCppInPlace/CppInPlace.cxx, and SimpleGaussianFunctional.cxx.",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "pixelID",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CenteredTransformInitializer:_fixedImage_movingImage_transform_operationMode": {
        "name": "CenteredTransformInitializer",
        "function_name": "CenteredTransformInitializer",
        "description": "CenteredTransformInitializer is a helper class intended to initialize the center of rotation and the translation of Transforms having the center of rotation among their parameters.\nThis function directly calls the execute method of CenteredTransformInitializerFilter in order to support a procedural API\nSee also\nitk::simple::CenteredTransformInitializerFilter for the object oriented interface\nExamples\nImageRegistrationMethodDisplacement1/ImageRegistrationMethodDisplacement1.cxx.",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transform",
                "default": "",
                "type": "Path"
            },
            {
                "name": "operationMode",
                "default": "itk::simple::CenteredTransformInitializerFilter::MOMENTS",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "CenteredVersorTransformInitializer:_fixedImage_movingImage_transform_computeRotation": {
        "name": "CenteredVersorTransformInitializer",
        "function_name": "CenteredVersorTransformInitializer",
        "description": "CenteredVersorTransformInitializer is a helper class intended to initialize the center of rotation, versor, and translation of the VersorRigid3DTransform.\nThis function directly calls the execute method of CenteredVectorTransformInitializerFilter in order to support a procedural API.\nSee also\nitk::simple::CenteredVersorTransformInitializerFilter for the object oriented interface",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transform",
                "default": "",
                "type": "Path"
            },
            {
                "name": "computeRotation",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ChangeLabel:_image1_changeMap": {
        "name": "ChangeLabel",
        "function_name": "ChangeLabel",
        "description": "Change Sets of Labels.\n\\ This function directly calls the execute method of ChangeLabelImageFilter in order to support a procedural API\nSee also\nitk::simple::ChangeLabelImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "changeMap",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ChangeLabelLabelMap:_image1_changeMap": {
        "name": "ChangeLabelLabelMap",
        "function_name": "ChangeLabelLabelMap",
        "description": "Replace the label Ids of selected LabelObjects with new label Ids.\n\\ This function directly calls the execute method of ChangeLabelLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::ChangeLabelLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "changeMap",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CheckerBoard:_image1_image2_checkerPattern": {
        "name": "CheckerBoard",
        "function_name": "CheckerBoard",
        "description": "Combines two images in a checkerboard pattern.\n\\ This function directly calls the execute method of CheckerBoardImageFilter in order to support a procedural API\nSee also\nitk::simple::CheckerBoardImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "checkerPattern",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Clamp:_image1_outputPixelType_lowerBound_upperBound": {
        "name": "Clamp",
        "function_name": "Clamp",
        "description": "Casts input pixels to output pixel type and clamps the output pixel values to a specified range.\n\\ This function directly calls the execute method of ClampImageFilter in order to support a procedural API\nSee also\nitk::simple::ClampImageFilter for the object oriented interface\nReferenced by itk::simple::UnsharpMaskImageFilter::SetClamp().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "lowerBound",
                "default": "",
                "type": "float"
            },
            {
                "name": "upperBound",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ClosingByReconstruction:_image1_kernelRadius_kernelType_fullyConnected_preserveIntensities": {
        "name": "ClosingByReconstruction",
        "function_name": "ClosingByReconstruction",
        "description": "Closing by reconstruction of an image.\n\\ This function directly calls the execute method of ClosingByReconstructionImageFilter in order to support a procedural API\nSee also\nitk::simple::ClosingByReconstructionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "preserveIntensities",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CollidingFronts:_image1_seedPoints1_seedPoints2_applyConnectivity_negativeEpsilon_stopOnTargets": {
        "name": "CollidingFronts",
        "function_name": "CollidingFronts",
        "description": "Selects a region of space where two independent fronts run towards each other.\n\\ This function directly calls the execute method of CollidingFrontsImageFilter in order to support a procedural API\nSee also\nitk::simple::CollidingFrontsImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seedPoints1",
                "default": "",
                "type": "str"
            },
            {
                "name": "seedPoints2",
                "default": "",
                "type": "str"
            },
            {
                "name": "applyConnectivity",
                "default": true,
                "type": "bool"
            },
            {
                "name": "negativeEpsilon",
                "default": -1e-06,
                "type": "float"
            },
            {
                "name": "stopOnTargets",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ComplexToImaginary:_image1": {
        "name": "ComplexToImaginary",
        "function_name": "ComplexToImaginary",
        "description": "Computes pixel-wise the imaginary part of a complex image.\n\\ This function directly calls the execute method of ComplexToImaginaryImageFilter in order to support a procedural API\nSee also\nitk::simple::ComplexToImaginaryImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ComplexToModulus:_image1": {
        "name": "ComplexToModulus",
        "function_name": "ComplexToModulus",
        "description": "Computes pixel-wise the Modulus of a complex image.\n\\ This function directly calls the execute method of ComplexToModulusImageFilter in order to support a procedural API\nSee also\nitk::simple::ComplexToModulusImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ComplexToPhase:_image1": {
        "name": "ComplexToPhase",
        "function_name": "ComplexToPhase",
        "description": "Computes pixel-wise the modulus of a complex image.\n\\ This function directly calls the execute method of ComplexToPhaseImageFilter in order to support a procedural API\nSee also\nitk::simple::ComplexToPhaseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ComplexToReal:_image1": {
        "name": "ComplexToReal",
        "function_name": "ComplexToReal",
        "description": "Computes pixel-wise the real(x) part of a complex image.\n\\ This function directly calls the execute method of ComplexToRealImageFilter in order to support a procedural API\nSee also\nitk::simple::ComplexToRealImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Compose:_image1": {
        "name": "Compose:_image1",
        "function_name": "Compose",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\nThis function directly calls the execute method of ComposeImageFilter in order to support a procedural API\nSee also\nitk::simple::ComposeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Compose:_image1_image2": {
        "name": "Compose:_image1_image2",
        "function_name": "Compose",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\nThis function directly calls the execute method of ComposeImageFilter in order to support a procedural API\nSee also\nitk::simple::ComposeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Compose:_image1_image2_image3": {
        "name": "Compose:_image1_image2_image3",
        "function_name": "Compose",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\nThis function directly calls the execute method of ComposeImageFilter in order to support a procedural API\nSee also\nitk::simple::ComposeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Compose:_image1_image2_image3_image4": {
        "name": "Compose:_image1_image2_image3_image4",
        "function_name": "Compose",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\nThis function directly calls the execute method of ComposeImageFilter in order to support a procedural API\nSee also\nitk::simple::ComposeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Compose:_image1_image2_image3_image4_image5": {
        "name": "Compose:_image1_image2_image3_image4_image5",
        "function_name": "Compose",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\nThis function directly calls the execute method of ComposeImageFilter in order to support a procedural API\nSee also\nitk::simple::ComposeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Compose:_images": {
        "name": "Compose:_images",
        "function_name": "Compose",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\nThis function directly calls the execute method of ComposeImageFilter in order to support a procedural API\nSee also\nitk::simple::ComposeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ConfidenceConnected:_image1_seedList_numberOfIterations_multiplier_initialNeighborhoodRadius_replaceValue": {
        "name": "ConfidenceConnected",
        "function_name": "ConfidenceConnected",
        "description": "Segment pixels with similar statistics using connectivity.\n\\ This function directly calls the execute method of ConfidenceConnectedImageFilter in order to support a procedural API\nSee also\nitk::simple::ConfidenceConnectedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seedList",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfIterations",
                "default": 4,
                "type": "int"
            },
            {
                "name": "multiplier",
                "default": 4.5,
                "type": "float"
            },
            {
                "name": "initialNeighborhoodRadius",
                "default": 1,
                "type": "int"
            },
            {
                "name": "replaceValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ConnectedComponent:_image_fullyConnected": {
        "name": "ConnectedComponent:_image_fullyConnected",
        "function_name": "ConnectedComponent",
        "description": "Label the objects in a binary image.\n\\ This function directly calls the execute method of ConnectedComponentImageFilter in order to support a procedural API\nSee also\nitk::simple::ConnectedComponentImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ConnectedComponent:_image_maskImage_fullyConnected": {
        "name": "ConnectedComponent:_image_maskImage_fullyConnected",
        "function_name": "ConnectedComponent",
        "description": "Label the objects in a binary image.\n\\ This function directly calls the execute method of ConnectedComponentImageFilter in order to support a procedural API\nSee also\nitk::simple::ConnectedComponentImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ConnectedThreshold:_image1_seedList_lower_upper_replaceValue_connectivity": {
        "name": "ConnectedThreshold",
        "function_name": "ConnectedThreshold",
        "description": "Label pixels that are connected to a seed and lie within a range of values.\n\\ This function directly calls the execute method of ConnectedThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::ConnectedThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seedList",
                "default": "",
                "type": "str"
            },
            {
                "name": "lower",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upper",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "replaceValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "connectivity",
                "default": "itk::simple::ConnectedThresholdImageFilter::FaceConnectivity",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ConstantPad:_image1_padLowerBound_padUpperBound_constant": {
        "name": "ConstantPad",
        "function_name": "ConstantPad",
        "description": "Increase the image size by padding with a constant value.\n\\ This function directly calls the execute method of ConstantPadImageFilter in order to support a procedural API\nSee also\nitk::simple::ConstantPadImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "padLowerBound",
                "default": "",
                "type": "str"
            },
            {
                "name": "padUpperBound",
                "default": "",
                "type": "str"
            },
            {
                "name": "constant",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Convolution:_image_kernelImage_normalize_boundaryCondition_outputRegionMode": {
        "name": "Convolution",
        "function_name": "Convolution",
        "description": "Convolve a given image with an arbitrary image kernel.\n\\ This function directly calls the execute method of ConvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::ConvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::ConvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::ConvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Cos:_image1": {
        "name": "Cos",
        "function_name": "Cos",
        "description": "Computes the cosine of each pixel.\n\\ This function directly calls the execute method of CosImageFilter in order to support a procedural API\nSee also\nitk::simple::CosImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CreateKernel:_kernelType_size": {
        "name": "CreateKernel",
        "function_name": "CreateKernel",
        "description": "Definition at line 34 of file sitkCreateKernel.h.\nReferences sitkAnnulus, sitkBall, sitkBox, sitkCross, sitkExceptionMacro, and sitkKernelPolygonCreateMacro.",
        "inputs": [
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Crop:_image1_lowerBoundaryCropSize_upperBoundaryCropSize": {
        "name": "Crop",
        "function_name": "Crop",
        "description": "Decrease the image size by cropping the image by an itk::Size at both the upper and lower bounds of the largest possible region.\n\\ This function directly calls the execute method of CropImageFilter in order to support a procedural API\nSee also\nitk::simple::CropImageFilter for the object oriented interface\nReferenced by itk::simple::LabelMapMaskImageFilter::SetCrop().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lowerBoundaryCropSize",
                "default": "",
                "type": "str"
            },
            {
                "name": "upperBoundaryCropSize",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CurvatureAnisotropicDiffusion:_image1_timeStep_conductanceParameter_conductanceScalingUpdateInterval_numberOfIterations": {
        "name": "CurvatureAnisotropicDiffusion",
        "function_name": "CurvatureAnisotropicDiffusion",
        "description": "This filter performs anisotropic diffusion on a scalar itk::Image using the modified curvature diffusion equation (MCDE).\n\\ This function directly calls the execute method of CurvatureAnisotropicDiffusionImageFilter in order to support a procedural API\nSee also\nitk::simple::CurvatureAnisotropicDiffusionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "timeStep",
                "default": 0.0625,
                "type": "float"
            },
            {
                "name": "conductanceParameter",
                "default": 3.0,
                "type": "float"
            },
            {
                "name": "conductanceScalingUpdateInterval",
                "default": 1,
                "type": "int"
            },
            {
                "name": "numberOfIterations",
                "default": 5,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CurvatureFlow:_image1_timeStep_numberOfIterations": {
        "name": "CurvatureFlow",
        "function_name": "CurvatureFlow",
        "description": "Denoise an image using curvature driven flow.\n\\ This function directly calls the execute method of CurvatureFlowImageFilter in order to support a procedural API\nSee also\nitk::simple::CurvatureFlowImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "timeStep",
                "default": 0.05,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 5,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "CyclicShift:_image1_shift": {
        "name": "CyclicShift",
        "function_name": "CyclicShift",
        "description": "Perform a cyclic spatial shift of image intensities on the image grid.\n\\ This function directly calls the execute method of CyclicShiftImageFilter in order to support a procedural API\nSee also\nitk::simple::CyclicShiftImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "shift",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DanielssonDistanceMap:_image1_inputIsBinary_squaredDistance_useImageSpacing": {
        "name": "DanielssonDistanceMap",
        "function_name": "DanielssonDistanceMap",
        "description": "This filter computes the distance map of the input image as an approximation with pixel accuracy to the Euclidean distance.\n\\ This function directly calls the execute method of DanielssonDistanceMapImageFilter in order to support a procedural API\nSee also\nitk::simple::DanielssonDistanceMapImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "inputIsBinary",
                "default": false,
                "type": "bool"
            },
            {
                "name": "squaredDistance",
                "default": false,
                "type": "bool"
            },
            {
                "name": "useImageSpacing",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Derivative:_image1_direction_order_useImageSpacing": {
        "name": "Derivative",
        "function_name": "Derivative",
        "description": "Computes the directional derivative of an image. The directional derivative at each pixel location is computed by convolution with a derivative operator of user-specified order.\n\\ This function directly calls the execute method of DerivativeImageFilter in order to support a procedural API\nSee also\nitk::simple::DerivativeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "direction",
                "default": 0,
                "type": "int"
            },
            {
                "name": "order",
                "default": 1,
                "type": "int"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DICOMOrient:_image1_desiredCoordinateOrientation": {
        "name": "DICOMOrient",
        "function_name": "DICOMOrient",
        "description": "Permute axes and flip images as needed to obtain an approximation to the desired orientation.\n\\ This function directly calls the execute method of DICOMOrientImageFilter in order to support a procedural API\nSee also\nitk::simple::DICOMOrientImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "desiredCoordinateOrientation",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DilateObjectMorphology:_image1_kernelRadius_kernelType_objectValue": {
        "name": "DilateObjectMorphology",
        "function_name": "DilateObjectMorphology",
        "description": "dilation of an object in an image\n\\ This function directly calls the execute method of DilateObjectMorphologyImageFilter in order to support a procedural API\nSee also\nitk::simple::DilateObjectMorphologyImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "objectValue",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DiscreteGaussian:_image1_variance_maximumKernelWidth_maximumError_useImageSpacing": {
        "name": "DiscreteGaussian",
        "function_name": "DiscreteGaussian",
        "description": "Blurs an image by separable convolution with discrete gaussian kernels. This filter performs Gaussian blurring by separable convolution of an image and a discrete Gaussian operator (kernel).\n\\ This function directly calls the execute method of DiscreteGaussianImageFilter in order to support a procedural API\nSee also\nitk::simple::DiscreteGaussianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "variance",
                "default": "",
                "type": "str"
            },
            {
                "name": "maximumKernelWidth",
                "default": 32,
                "type": "int"
            },
            {
                "name": "maximumError",
                "default": "",
                "type": "str"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DiscreteGaussianDerivative:_image1_variance_order_maximumKernelWidth_maximumError_useImageSpacing_normalizeAcrossScale": {
        "name": "DiscreteGaussianDerivative",
        "function_name": "DiscreteGaussianDerivative",
        "description": "Calculates image derivatives using discrete derivative gaussian kernels. This filter calculates Gaussian derivative by separable convolution of an image and a discrete Gaussian derivative operator (kernel).\n\\ This function directly calls the execute method of DiscreteGaussianDerivativeImageFilter in order to support a procedural API\nSee also\nitk::simple::DiscreteGaussianDerivativeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "variance",
                "default": "",
                "type": "str"
            },
            {
                "name": "order",
                "default": "",
                "type": "str"
            },
            {
                "name": "maximumKernelWidth",
                "default": 32,
                "type": "int"
            },
            {
                "name": "maximumError",
                "default": 0.01,
                "type": "float"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            },
            {
                "name": "normalizeAcrossScale",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DisplacementFieldJacobianDeterminant:_image1_useImageSpacing_derivativeWeights": {
        "name": "DisplacementFieldJacobianDeterminant",
        "function_name": "DisplacementFieldJacobianDeterminant",
        "description": "Computes a scalar image from a vector image (e.g., deformation field) input, where each output scalar at each pixel is the Jacobian determinant of the vector field at that location. This calculation is correct in the case where the vector image is a \"displacement\" from the current location. The computation for the jacobian determinant is: det[ dT/dx ] = det[ I + du/dx ].\n\\ This function directly calls the execute method of DisplacementFieldJacobianDeterminantFilter in order to support a procedural API\nSee also\nitk::simple::DisplacementFieldJacobianDeterminantFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            },
            {
                "name": "derivativeWeights",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Divide:_image1_image2": {
        "name": "Divide:_image1_image2",
        "function_name": "Divide",
        "description": "Pixel-wise division of two images.\n\\ This function directly calls the execute method of DivideImageFilter in order to support a procedural API\nSee also\nitk::simple::DivideImageFilter for the object oriented interface\nExamples\nN4BiasFieldCorrection/N4BiasFieldCorrection.cxx.\nReferenced by operator/(), and operator/=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Divide:_image1_constant": {
        "name": "Divide:_image1_constant",
        "function_name": "Divide",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Divide:_constant_image2": {
        "name": "Divide:_constant_image2",
        "function_name": "Divide",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DivideFloor:_image1_image2": {
        "name": "DivideFloor:_image1_image2",
        "function_name": "DivideFloor",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of DivideFloorImageFilter in order to support a procedural API\nSee also\nitk::simple::DivideFloorImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DivideFloor:_image1_constant": {
        "name": "DivideFloor:_image1_constant",
        "function_name": "DivideFloor",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DivideFloor:_constant_image2": {
        "name": "DivideFloor:_constant_image2",
        "function_name": "DivideFloor",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DivideReal:_image1_image2": {
        "name": "DivideReal:_image1_image2",
        "function_name": "DivideReal",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of DivideRealImageFilter in order to support a procedural API\nSee also\nitk::simple::DivideRealImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DivideReal:_image1_constant": {
        "name": "DivideReal:_image1_constant",
        "function_name": "DivideReal",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DivideReal:_constant_image2": {
        "name": "DivideReal:_constant_image2",
        "function_name": "DivideReal",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "DoubleThreshold:_image1_threshold1_threshold2_threshold3_threshold4_insideValue_outsideValue_fullyConnected": {
        "name": "DoubleThreshold",
        "function_name": "DoubleThreshold",
        "description": "Binarize an input image using double thresholding.\n\\ This function directly calls the execute method of DoubleThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::DoubleThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "threshold1",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "threshold2",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "threshold3",
                "default": 254.0,
                "type": "float"
            },
            {
                "name": "threshold4",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "EdgePotential:_image1": {
        "name": "EdgePotential",
        "function_name": "EdgePotential",
        "description": "Computes the edge potential of an image from the image gradient.\n\\ This function directly calls the execute method of EdgePotentialImageFilter in order to support a procedural API\nSee also\nitk::simple::EdgePotentialImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_fixedMask_movingMask_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_fixedMask_movingMask_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fixedMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_parameterMap_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_parameterMap_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "parameterMap",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage__fixedMask_movingMask_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage__fixedMask_movingMask_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "",
                "default": "",
                "type": "str"
            },
            {
                "name": "fixedMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_defaultParameterMapName_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_defaultParameterMapName_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "defaultParameterMapName",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_defaultParameterMapName_fixedMask_movingMask_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_defaultParameterMapName_fixedMask_movingMask_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "defaultParameterMapName",
                "default": "",
                "type": "str"
            },
            {
                "name": "fixedMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_parameterMapVector_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_parameterMapVector_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "parameterMapVector",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Elastix:_fixedImage_movingImage_parameterMapVector_fixedMask_movingMask_logToConsole_logToFile_outputDirectory": {
        "name": "Elastix:_fixedImage_movingImage_parameterMapVector_fixedMask_movingMask_logToConsole_logToFile_outputDirectory",
        "function_name": "Elastix",
        "description": "",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "parameterMapVector",
                "default": "",
                "type": "str"
            },
            {
                "name": "fixedMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToFile",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Equal:_image1_image2_backgroundValue_foregroundValue": {
        "name": "Equal:_image1_image2_backgroundValue_foregroundValue",
        "function_name": "Equal",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of EqualImageFilter in order to support a procedural API\nSee also\nitk::simple::EqualImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Equal:_image1_constant_backgroundValue_foregroundValue": {
        "name": "Equal:_image1_constant_backgroundValue_foregroundValue",
        "function_name": "Equal",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Equal:_constant_image2_backgroundValue_foregroundValue": {
        "name": "Equal:_constant_image2_backgroundValue_foregroundValue",
        "function_name": "Equal",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ErodeObjectMorphology:_image1_kernelRadius_kernelType_objectValue_backgroundValue": {
        "name": "ErodeObjectMorphology",
        "function_name": "ErodeObjectMorphology",
        "description": "Erosion of an object in an image.\n\\ This function directly calls the execute method of ErodeObjectMorphologyImageFilter in order to support a procedural API\nSee also\nitk::simple::ErodeObjectMorphologyImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "objectValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Exp:_image1": {
        "name": "Exp",
        "function_name": "Exp",
        "description": "Computes the exponential function of each pixel.\n\\ This function directly calls the execute method of ExpImageFilter in order to support a procedural API\nSee also\nitk::simple::ExpImageFilter for the object oriented interface\nExamples\nN4BiasFieldCorrection/N4BiasFieldCorrection.cxx.",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Expand:_image1_expandFactors_interpolator": {
        "name": "Expand",
        "function_name": "Expand",
        "description": "Expand the size of an image by an integer factor in each dimension.\n\\ This function directly calls the execute method of ExpandImageFilter in order to support a procedural API\nSee also\nitk::simple::ExpandImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "expandFactors",
                "default": "",
                "type": "str"
            },
            {
                "name": "interpolator",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ExpNegative:_image1": {
        "name": "ExpNegative",
        "function_name": "ExpNegative",
        "description": "Computes the function exp(-K.x) for each input pixel.\n\\ This function directly calls the execute method of ExpNegativeImageFilter in order to support a procedural API\nSee also\nitk::simple::ExpNegativeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Extract:_image1_size_index_directionCollapseToStrategy": {
        "name": "Extract",
        "function_name": "Extract",
        "description": "Decrease the image size by cropping the image to the selected region bounds.\n\\ This function directly calls the execute method of ExtractImageFilter in order to support a procedural API\nSee also\nitk::simple::ExtractImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "index",
                "default": "",
                "type": "str"
            },
            {
                "name": "directionCollapseToStrategy",
                "default": "itk::simple::ExtractImageFilter::DIRECTIONCOLLAPSETOGUESS",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FastApproximateRank:_image1_rank_radius": {
        "name": "FastApproximateRank",
        "function_name": "FastApproximateRank",
        "description": "A separable rank filter.\n\\ This function directly calls the execute method of FastApproximateRankImageFilter in order to support a procedural API\nSee also\nitk::simple::FastApproximateRankImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "rank",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FastMarching:_image1_trialPoints_normalizationFactor_stoppingValue_initialTrialValues": {
        "name": "FastMarching",
        "function_name": "FastMarching",
        "description": "Solve an Eikonal equation using Fast Marching.\n\\ This function directly calls the execute method of FastMarchingImageFilter in order to support a procedural API\nSee also\nitk::simple::FastMarchingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "trialPoints",
                "default": "",
                "type": "str"
            },
            {
                "name": "normalizationFactor",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "stoppingValue",
                "default": "",
                "type": "float"
            },
            {
                "name": "initialTrialValues",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FastMarchingBase:_image1_trialPoints_normalizationFactor_stoppingValue_topologyCheck_initialTrialValues": {
        "name": "FastMarchingBase",
        "function_name": "FastMarchingBase",
        "description": "Apply the Fast Marching method to solve an Eikonal equation on an image.\n\\ This function directly calls the execute method of FastMarchingBaseImageFilter in order to support a procedural API\nSee also\nitk::simple::FastMarchingBaseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "trialPoints",
                "default": "",
                "type": "str"
            },
            {
                "name": "normalizationFactor",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "stoppingValue",
                "default": "",
                "type": "float"
            },
            {
                "name": "topologyCheck",
                "default": "itk::simple::FastMarchingBaseImageFilter::Nothing",
                "type": "Path"
            },
            {
                "name": "initialTrialValues",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FastMarchingUpwindGradient:_image1_trialPoints_numberOfTargets_targetPoints_targetOffset_normalizationFactor_initialTrialValues": {
        "name": "FastMarchingUpwindGradient",
        "function_name": "FastMarchingUpwindGradient",
        "description": "Generates the upwind gradient field of fast marching arrival times.\n\\ This function directly calls the execute method of FastMarchingUpwindGradientImageFilter in order to support a procedural API\nSee also\nitk::simple::FastMarchingUpwindGradientImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "trialPoints",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfTargets",
                "default": 0,
                "type": "int"
            },
            {
                "name": "targetPoints",
                "default": "",
                "type": "str"
            },
            {
                "name": "targetOffset",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "normalizationFactor",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "initialTrialValues",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FFTConvolution:_image_kernelImage_normalize_boundaryCondition_outputRegionMode": {
        "name": "FFTConvolution",
        "function_name": "FFTConvolution",
        "description": "Convolve a given image with an arbitrary image kernel using multiplication in the Fourier domain.\n\\ This function directly calls the execute method of FFTConvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::FFTConvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::FFTConvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::FFTConvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FFTNormalizedCorrelation:_fixedImage_movingImage_requiredNumberOfOverlappingPixels_requiredFractionOfOverlappingPixels": {
        "name": "FFTNormalizedCorrelation",
        "function_name": "FFTNormalizedCorrelation",
        "description": "Calculate normalized cross correlation using FFTs.\n\\ This function directly calls the execute method of FFTNormalizedCorrelationImageFilter in order to support a procedural API\nSee also\nitk::simple::FFTNormalizedCorrelationImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "requiredNumberOfOverlappingPixels",
                "default": 0,
                "type": "int"
            },
            {
                "name": "requiredFractionOfOverlappingPixels",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FFTPad:_image1_boundaryCondition_sizeGreatestPrimeFactor": {
        "name": "FFTPad",
        "function_name": "FFTPad",
        "description": "Pad an image to make it suitable for an FFT transformation.\n\\ This function directly calls the execute method of FFTPadImageFilter in order to support a procedural API\nSee also\nitk::simple::FFTPadImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::FFTPadImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "sizeGreatestPrimeFactor",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "FFTShift:_image1_inverse": {
        "name": "FFTShift",
        "function_name": "FFTShift",
        "description": "Shift the zero-frequency components of a Fourier transform to the center of the image.\n\\ This function directly calls the execute method of FFTShiftImageFilter in order to support a procedural API\nSee also\nitk::simple::FFTShiftImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "inverse",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Flip:_image1_flipAxes_flipAboutOrigin": {
        "name": "Flip",
        "function_name": "Flip",
        "description": "Flips an image across user specified axes.\n\\ This function directly calls the execute method of FlipImageFilter in order to support a procedural API\nSee also\nitk::simple::FlipImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "flipAxes",
                "default": "",
                "type": "str"
            },
            {
                "name": "flipAboutOrigin",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ForwardFFT:_image1": {
        "name": "ForwardFFT",
        "function_name": "ForwardFFT",
        "description": "Base class for forward Fast Fourier Transform .\n\\ This function directly calls the execute method of ForwardFFTImageFilter in order to support a procedural API\nSee also\nitk::simple::ForwardFFTImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GaborSource:_outputPixelType_size_sigma_mean_frequency_origin_spacing_direction": {
        "name": "GaborSource",
        "function_name": "GaborSource",
        "description": "Generate an n-dimensional image of a Gabor filter.\nThis function directly calls the execute method of GaborImageSource in order to support a procedural API\nSee also\nitk::simple::GaborImageSource for the object oriented interface",
        "inputs": [
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "sigma",
                "default": "",
                "type": "str"
            },
            {
                "name": "mean",
                "default": "",
                "type": "str"
            },
            {
                "name": "frequency",
                "default": 0.4,
                "type": "float"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GaussianSource:_outputPixelType_size_sigma_mean_scale_origin_spacing_direction_normalized": {
        "name": "GaussianSource",
        "function_name": "GaussianSource",
        "description": "Generate an n-dimensional image of a Gaussian.\nThis function directly calls the execute method of GaussianImageSource in order to support a procedural API\nSee also\nitk::simple::GaussianImageSource for the object oriented interface\nExamples\nCppCMake/Source/sitk_example.cxx, and HelloWorld/HelloWorld.cxx.",
        "inputs": [
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "sigma",
                "default": "",
                "type": "str"
            },
            {
                "name": "mean",
                "default": "",
                "type": "str"
            },
            {
                "name": "scale",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "normalized",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GeodesicActiveContourLevelSet:_initialImage_featureImage_maximumRMSError_propagationScaling_curvatureScaling_advectionScaling_numberOfIterations_reverseExpansionDirection": {
        "name": "GeodesicActiveContourLevelSet",
        "function_name": "GeodesicActiveContourLevelSet",
        "description": "Segments structures in images based on a user supplied edge potential map.\n\\ This function directly calls the execute method of GeodesicActiveContourLevelSetImageFilter in order to support a procedural API\nSee also\nitk::simple::GeodesicActiveContourLevelSetImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "initialImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximumRMSError",
                "default": 0.01,
                "type": "float"
            },
            {
                "name": "propagationScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "curvatureScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "advectionScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            },
            {
                "name": "reverseExpansionDirection",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GetDefaultParameterMap:_transform_numberOfResolutions_finalGridSpacingInPhysicalUnits": {
        "name": "GetDefaultParameterMap",
        "function_name": "GetDefaultParameterMap",
        "description": "",
        "inputs": [
            {
                "name": "transform",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfResolutions",
                "default": 4,
                "type": "int"
            },
            {
                "name": "finalGridSpacingInPhysicalUnits",
                "default": 8.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "GetImageFromVectorImage:_img_transferOwnership": {
        "name": "GetImageFromVectorImage",
        "function_name": "GetImageFromVectorImage",
        "description": "Utility methods to convert between itk image types efficiently by sharing the buffer between the input and output.",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transferOwnership",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "GetPixelIDValueAsString:_type": {
        "name": "GetPixelIDValueAsString",
        "function_name": "GetPixelIDValueAsString",
        "description": "Referenced by itk::simple::ProcessObject::CastImageToITK().",
        "inputs": [
            {
                "name": "type",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "GetPixelIDValueFromString:_enumString": {
        "name": "GetPixelIDValueFromString",
        "function_name": "GetPixelIDValueFromString",
        "description": "Function mapping enumeration names in std::string to values.\nThis function is intended for use by the R bindings. R stores the enumeration values using the names : \"sitkUnknown\", \"sitkUInt8\", etc from PixelIDValueEnum above. This function is used to provide the integer values using calls like:\nval = GetPixelIDValueFromString(\"sitkInt32\")\nIf the pixel type has not been instantiated then the sitkUnknown value (-1) will be returned. If the pixel type string is not recognized (i.e. is not in the set of tested names) then the return value is -99. The idea is to provide a warning (via the R package) if this function needs to be updated to match changes to PixelIDValueEnum - i.e. if a new pixel type is added.",
        "inputs": [
            {
                "name": "enumString",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "GetScalarImageFromVectorImage:_img": {
        "name": "GetScalarImageFromVectorImage",
        "function_name": "GetScalarImageFromVectorImage",
        "description": "Utility methods to convert between itk image types efficiently by sharing the buffer between the input and output.",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "GetVectorImageFromImage:_img_transferOwnership": {
        "name": "GetVectorImageFromImage",
        "function_name": "GetVectorImageFromImage",
        "description": "Utility methods to convert between itk image types efficiently by sharing the buffer between the input and output.\nReferenced by itk::simple::ProcessObject::CastITKToImage().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transferOwnership",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "GetVectorImageFromScalarImage:_img": {
        "name": "GetVectorImageFromScalarImage",
        "function_name": "GetVectorImageFromScalarImage",
        "description": "Utility methods to convert between itk image types efficiently by sharing the buffer between the input and output.",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Gradient:_image1_useImageSpacing_useImageDirection": {
        "name": "Gradient",
        "function_name": "Gradient",
        "description": "Computes the gradient of an image using directional derivatives.\n\\ This function directly calls the execute method of GradientImageFilter in order to support a procedural API\nSee also\nitk::simple::GradientImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            },
            {
                "name": "useImageDirection",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GradientAnisotropicDiffusion:_image1_timeStep_conductanceParameter_conductanceScalingUpdateInterval_numberOfIterations": {
        "name": "GradientAnisotropicDiffusion",
        "function_name": "GradientAnisotropicDiffusion",
        "description": "This filter performs anisotropic diffusion on a scalar itk::Image using the classic Perona-Malik, gradient magnitude based equation.\n\\ This function directly calls the execute method of GradientAnisotropicDiffusionImageFilter in order to support a procedural API\nSee also\nitk::simple::GradientAnisotropicDiffusionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "timeStep",
                "default": 0.125,
                "type": "float"
            },
            {
                "name": "conductanceParameter",
                "default": 3.0,
                "type": "float"
            },
            {
                "name": "conductanceScalingUpdateInterval",
                "default": 1,
                "type": "int"
            },
            {
                "name": "numberOfIterations",
                "default": 5,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GradientMagnitude:_image1_useImageSpacing": {
        "name": "GradientMagnitude",
        "function_name": "GradientMagnitude",
        "description": "Computes the gradient magnitude of an image region at each pixel.\n\\ This function directly calls the execute method of GradientMagnitudeImageFilter in order to support a procedural API\nSee also\nitk::simple::GradientMagnitudeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GradientMagnitudeRecursiveGaussian:_image1_sigma_normalizeAcrossScale": {
        "name": "GradientMagnitudeRecursiveGaussian",
        "function_name": "GradientMagnitudeRecursiveGaussian",
        "description": "Computes the Magnitude of the Gradient of an image by convolution with the first derivative of a Gaussian.\n\\ This function directly calls the execute method of GradientMagnitudeRecursiveGaussianImageFilter in order to support a procedural API\nSee also\nitk::simple::GradientMagnitudeRecursiveGaussianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sigma",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "normalizeAcrossScale",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GradientRecursiveGaussian:_image1_sigma_normalizeAcrossScale_useImageDirection": {
        "name": "GradientRecursiveGaussian",
        "function_name": "GradientRecursiveGaussian",
        "description": "Computes the gradient of an image by convolution with the first derivative of a Gaussian.\n\\ This function directly calls the execute method of GradientRecursiveGaussianImageFilter in order to support a procedural API\nSee also\nitk::simple::GradientRecursiveGaussianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sigma",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "normalizeAcrossScale",
                "default": false,
                "type": "bool"
            },
            {
                "name": "useImageDirection",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleConnectedClosing:_image1_seed_fullyConnected": {
        "name": "GrayscaleConnectedClosing",
        "function_name": "GrayscaleConnectedClosing",
        "description": "Enhance pixels associated with a dark object (identified by a seed pixel) where the dark object is surrounded by a brighter object.\n\\ This function directly calls the execute method of GrayscaleConnectedClosingImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleConnectedClosingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seed",
                "default": "",
                "type": "str"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleConnectedOpening:_image1_seed_fullyConnected": {
        "name": "GrayscaleConnectedOpening",
        "function_name": "GrayscaleConnectedOpening",
        "description": "Enhance pixels associated with a bright object (identified by a seed pixel) where the bright object is surrounded by a darker object.\n\\ This function directly calls the execute method of GrayscaleConnectedOpeningImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleConnectedOpeningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seed",
                "default": "",
                "type": "str"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleDilate:_image1_kernelRadius_kernelType": {
        "name": "GrayscaleDilate",
        "function_name": "GrayscaleDilate",
        "description": "Grayscale dilation of an image.\n\\ This function directly calls the execute method of GrayscaleDilateImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleDilateImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleErode:_image1_kernelRadius_kernelType": {
        "name": "GrayscaleErode",
        "function_name": "GrayscaleErode",
        "description": "Grayscale erosion of an image.\n\\ This function directly calls the execute method of GrayscaleErodeImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleErodeImageFilter for the object oriented interface\nExamples\nBufferImportExport.cxx.",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleFillhole:_image1_fullyConnected": {
        "name": "GrayscaleFillhole",
        "function_name": "GrayscaleFillhole",
        "description": "Remove local minima not connected to the boundary of the image.\n\\ This function directly calls the execute method of GrayscaleFillholeImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleFillholeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleGeodesicDilate:_image1_image2_runOneIteration_fullyConnected": {
        "name": "GrayscaleGeodesicDilate",
        "function_name": "GrayscaleGeodesicDilate",
        "description": "Geodesic grayscale dilation of an image.\n\\ This function directly calls the execute method of GrayscaleGeodesicDilateImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleGeodesicDilateImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "runOneIteration",
                "default": false,
                "type": "bool"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleGeodesicErode:_image1_image2_runOneIteration_fullyConnected": {
        "name": "GrayscaleGeodesicErode",
        "function_name": "GrayscaleGeodesicErode",
        "description": "geodesic gray scale erosion of an image\n\\ This function directly calls the execute method of GrayscaleGeodesicErodeImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleGeodesicErodeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "runOneIteration",
                "default": false,
                "type": "bool"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleGrindPeak:_image1_fullyConnected": {
        "name": "GrayscaleGrindPeak",
        "function_name": "GrayscaleGrindPeak",
        "description": "Remove local maxima not connected to the boundary of the image.\n\\ This function directly calls the execute method of GrayscaleGrindPeakImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleGrindPeakImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleMorphologicalClosing:_image1_kernelRadius_kernelType_safeBorder": {
        "name": "GrayscaleMorphologicalClosing",
        "function_name": "GrayscaleMorphologicalClosing",
        "description": "Grayscale closing of an image.\n\\ This function directly calls the execute method of GrayscaleMorphologicalClosingImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleMorphologicalClosingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "safeBorder",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GrayscaleMorphologicalOpening:_image1_kernelRadius_kernelType_safeBorder": {
        "name": "GrayscaleMorphologicalOpening",
        "function_name": "GrayscaleMorphologicalOpening",
        "description": "Grayscale opening of an image.\n\\ This function directly calls the execute method of GrayscaleMorphologicalOpeningImageFilter in order to support a procedural API\nSee also\nitk::simple::GrayscaleMorphologicalOpeningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "safeBorder",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Greater:_image1_image2_backgroundValue_foregroundValue": {
        "name": "Greater:_image1_image2_backgroundValue_foregroundValue",
        "function_name": "Greater",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of GreaterImageFilter in order to support a procedural API\nSee also\nitk::simple::GreaterImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Greater:_image1_constant_backgroundValue_foregroundValue": {
        "name": "Greater:_image1_constant_backgroundValue_foregroundValue",
        "function_name": "Greater",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Greater:_constant_image2_backgroundValue_foregroundValue": {
        "name": "Greater:_constant_image2_backgroundValue_foregroundValue",
        "function_name": "Greater",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GreaterEqual:_image1_image2_backgroundValue_foregroundValue": {
        "name": "GreaterEqual:_image1_image2_backgroundValue_foregroundValue",
        "function_name": "GreaterEqual",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of GreaterEqualImageFilter in order to support a procedural API\nSee also\nitk::simple::GreaterEqualImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GreaterEqual:_image1_constant_backgroundValue_foregroundValue": {
        "name": "GreaterEqual:_image1_constant_backgroundValue_foregroundValue",
        "function_name": "GreaterEqual",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GreaterEqual:_constant_image2_backgroundValue_foregroundValue": {
        "name": "GreaterEqual:_constant_image2_backgroundValue_foregroundValue",
        "function_name": "GreaterEqual",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "GridSource:_outputPixelType_size_sigma_gridSpacing_gridOffset_scale_origin_spacing_direction_whichDimensions": {
        "name": "GridSource",
        "function_name": "GridSource",
        "description": "Generate an n-dimensional image of a grid.\nThis function directly calls the execute method of GridImageSource in order to support a procedural API\nSee also\nitk::simple::GridImageSource for the object oriented interface",
        "inputs": [
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "sigma",
                "default": "",
                "type": "str"
            },
            {
                "name": "gridSpacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "gridOffset",
                "default": "",
                "type": "str"
            },
            {
                "name": "scale",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "whichDimensions",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HalfHermitianToRealInverseFFT:_image1_actualXDimensionIsOdd": {
        "name": "HalfHermitianToRealInverseFFT",
        "function_name": "HalfHermitianToRealInverseFFT",
        "description": "Base class for specialized complex-to-real inverse Fast Fourier Transform .\n\\ This function directly calls the execute method of HalfHermitianToRealInverseFFTImageFilter in order to support a procedural API\nSee also\nitk::simple::HalfHermitianToRealInverseFFTImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "actualXDimensionIsOdd",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Hash:_image_function": {
        "name": "Hash",
        "function_name": "Hash",
        "description": "",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "function",
                "default": "HashImageFilter::SHA1",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "HConcave:_image1_height_fullyConnected": {
        "name": "HConcave",
        "function_name": "HConcave",
        "description": "Identify local minima whose depth below the baseline is greater than h.\n\\ This function directly calls the execute method of HConcaveImageFilter in order to support a procedural API\nSee also\nitk::simple::HConcaveImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "height",
                "default": 2.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HConvex:_image1_height_fullyConnected": {
        "name": "HConvex",
        "function_name": "HConvex",
        "description": "Identify local maxima whose height above the baseline is greater than h.\n\\ This function directly calls the execute method of HConvexImageFilter in order to support a procedural API\nSee also\nitk::simple::HConvexImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "height",
                "default": 2.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HistogramMatching:_image_referenceImage_numberOfHistogramLevels_numberOfMatchPoints_thresholdAtMeanIntensity": {
        "name": "HistogramMatching",
        "function_name": "HistogramMatching",
        "description": "Normalize the grayscale values for a source image by matching the shape of the source image histogram to a reference histogram.\n\\ This function directly calls the execute method of HistogramMatchingImageFilter in order to support a procedural API\nSee also\nitk::simple::HistogramMatchingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "referenceImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "numberOfHistogramLevels",
                "default": 256,
                "type": "int"
            },
            {
                "name": "numberOfMatchPoints",
                "default": 1,
                "type": "int"
            },
            {
                "name": "thresholdAtMeanIntensity",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HMaxima:_image1_height": {
        "name": "HMaxima",
        "function_name": "HMaxima",
        "description": "Suppress local maxima whose height above the baseline is less than h.\n\\ This function directly calls the execute method of HMaximaImageFilter in order to support a procedural API\nSee also\nitk::simple::HMaximaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "height",
                "default": 2.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HMinima:_image1_height_fullyConnected": {
        "name": "HMinima",
        "function_name": "HMinima",
        "description": "Suppress local minima whose depth below the baseline is less than h.\n\\ This function directly calls the execute method of HMinimaImageFilter in order to support a procedural API\nSee also\nitk::simple::HMinimaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "height",
                "default": 2.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HuangThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "HuangThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "HuangThreshold",
        "description": "Threshold an image using the Huang Threshold.\n\\ This function directly calls the execute method of HuangThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::HuangThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 128,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "HuangThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "HuangThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "HuangThreshold",
        "description": "Threshold an image using the Huang Threshold.\n\\ This function directly calls the execute method of HuangThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::HuangThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 128,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ImportAsDouble:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsDouble",
        "function_name": "ImportAsDouble",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "float"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsFloat:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsFloat",
        "function_name": "ImportAsFloat",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "float"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsInt16:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsInt16",
        "function_name": "ImportAsInt16",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsInt32:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsInt32",
        "function_name": "ImportAsInt32",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsInt64:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsInt64",
        "function_name": "ImportAsInt64",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsInt8:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsInt8",
        "function_name": "ImportAsInt8",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsUInt16:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsUInt16",
        "function_name": "ImportAsUInt16",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsUInt32:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsUInt32",
        "function_name": "ImportAsUInt32",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsUInt64:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsUInt64",
        "function_name": "ImportAsUInt64",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ImportAsUInt8:_buffer_size_spacing_origin_direction_numberOfComponents": {
        "name": "ImportAsUInt8",
        "function_name": "ImportAsUInt8",
        "description": "",
        "inputs": [
            {
                "name": "buffer",
                "default": "",
                "type": "int"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfComponents",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "IntensityWindowing:_image1_windowMinimum_windowMaximum_outputMinimum_outputMaximum": {
        "name": "IntensityWindowing",
        "function_name": "IntensityWindowing",
        "description": "Applies a linear transformation to the intensity levels of the input Image that are inside a user-defined interval. Values below this interval are mapped to a constant. Values over the interval are mapped to another constant.\n\\ This function directly calls the execute method of IntensityWindowingImageFilter in order to support a procedural API\nSee also\nitk::simple::IntensityWindowingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "windowMinimum",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "windowMaximum",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "outputMinimum",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "outputMaximum",
                "default": 255.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IntermodesThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "IntermodesThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "IntermodesThreshold",
        "description": "Threshold an image using the Intermodes Threshold.\n\\ This function directly calls the execute method of IntermodesThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::IntermodesThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IntermodesThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "IntermodesThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "IntermodesThreshold",
        "description": "Threshold an image using the Intermodes Threshold.\n\\ This function directly calls the execute method of IntermodesThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::IntermodesThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "InverseDeconvolution:_image1_image2_kernelZeroMagnitudeThreshold_normalize_boundaryCondition_outputRegionMode": {
        "name": "InverseDeconvolution",
        "function_name": "InverseDeconvolution",
        "description": "The direct linear inverse deconvolution filter.\n\\ This function directly calls the execute method of InverseDeconvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::InverseDeconvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelZeroMagnitudeThreshold",
                "default": 0.0001,
                "type": "float"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::InverseDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::InverseDeconvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "InverseDisplacementField:_image1_size_outputOrigin_outputSpacing_subsamplingFactor": {
        "name": "InverseDisplacementField",
        "function_name": "InverseDisplacementField",
        "description": "Computes the inverse of a displacement field.\n\\ This function directly calls the execute method of InverseDisplacementFieldImageFilter in order to support a procedural API\nSee also\nitk::simple::InverseDisplacementFieldImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputOrigin",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputSpacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "subsamplingFactor",
                "default": 16,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "InverseFFT:_image1": {
        "name": "InverseFFT",
        "function_name": "InverseFFT",
        "description": "Base class for inverse Fast Fourier Transform .\n\\ This function directly calls the execute method of InverseFFTImageFilter in order to support a procedural API\nSee also\nitk::simple::InverseFFTImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "InvertDisplacementField:_image1_maximumNumberOfIterations_maxErrorToleranceThreshold_meanErrorToleranceThreshold_enforceBoundaryCondition": {
        "name": "InvertDisplacementField",
        "function_name": "InvertDisplacementField",
        "description": "Iteratively estimate the inverse field of a displacement field.\n\\ This function directly calls the execute method of InvertDisplacementFieldImageFilter in order to support a procedural API\nSee also\nitk::simple::InvertDisplacementFieldImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": 10,
                "type": "int"
            },
            {
                "name": "maxErrorToleranceThreshold",
                "default": 0.1,
                "type": "float"
            },
            {
                "name": "meanErrorToleranceThreshold",
                "default": 0.001,
                "type": "float"
            },
            {
                "name": "enforceBoundaryCondition",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "InvertIntensity:_image1_maximum": {
        "name": "InvertIntensity",
        "function_name": "InvertIntensity",
        "description": "Invert the intensity of an image.\n\\ This function directly calls the execute method of InvertIntensityImageFilter in order to support a procedural API\nSee also\nitk::simple::InvertIntensityImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximum",
                "default": 255.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IsoContourDistance:_image1_levelSetValue_farValue": {
        "name": "IsoContourDistance",
        "function_name": "IsoContourDistance",
        "description": "Compute an approximate distance from an interpolated isocontour to the close grid points.\n\\ This function directly calls the execute method of IsoContourDistanceImageFilter in order to support a procedural API\nSee also\nitk::simple::IsoContourDistanceImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "levelSetValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "farValue",
                "default": 10.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IsoDataThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "IsoDataThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "IsoDataThreshold",
        "description": "Threshold an image using the IsoData Threshold.\n\\ This function directly calls the execute method of IsoDataThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::IsoDataThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IsoDataThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "IsoDataThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "IsoDataThreshold",
        "description": "Threshold an image using the IsoData Threshold.\n\\ This function directly calls the execute method of IsoDataThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::IsoDataThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IsolatedConnected:_image1_seed1_seed2_lower_upper_replaceValue_isolatedValueTolerance_findUpperThreshold": {
        "name": "IsolatedConnected",
        "function_name": "IsolatedConnected",
        "description": "Label pixels that are connected to one set of seeds but not another.\n\\ This function directly calls the execute method of IsolatedConnectedImageFilter in order to support a procedural API\nSee also\nitk::simple::IsolatedConnectedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seed1",
                "default": "",
                "type": "str"
            },
            {
                "name": "seed2",
                "default": "",
                "type": "str"
            },
            {
                "name": "lower",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upper",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "replaceValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "isolatedValueTolerance",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "findUpperThreshold",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IsolatedWatershed:_image1_seed1_seed2_threshold_upperValueLimit_isolatedValueTolerance_replaceValue1_replaceValue2": {
        "name": "IsolatedWatershed",
        "function_name": "IsolatedWatershed",
        "description": "Isolate watershed basins using two seeds.\n\\ This function directly calls the execute method of IsolatedWatershedImageFilter in order to support a procedural API\nSee also\nitk::simple::IsolatedWatershedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seed1",
                "default": "",
                "type": "str"
            },
            {
                "name": "seed2",
                "default": "",
                "type": "str"
            },
            {
                "name": "threshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upperValueLimit",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "isolatedValueTolerance",
                "default": 0.001,
                "type": "float"
            },
            {
                "name": "replaceValue1",
                "default": 1,
                "type": "int"
            },
            {
                "name": "replaceValue2",
                "default": 2,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "IterativeInverseDisplacementField:_image1_numberOfIterations_stopValue": {
        "name": "IterativeInverseDisplacementField",
        "function_name": "IterativeInverseDisplacementField",
        "description": "Computes the inverse of a displacement field.\n\\ This function directly calls the execute method of IterativeInverseDisplacementFieldImageFilter in order to support a procedural API\nSee also\nitk::simple::IterativeInverseDisplacementFieldImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "numberOfIterations",
                "default": 5,
                "type": "int"
            },
            {
                "name": "stopValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "JoinSeries:_image1_image2_image3_image4_image5_origin_spacing": {
        "name": "JoinSeries:_image1_image2_image3_image4_image5_origin_spacing",
        "function_name": "JoinSeries",
        "description": "Join N-D images into an (N+1)-D image.\nThis function directly calls the execute method of JoinSeriesImageFilter in order to support a procedural API\nSee also\nitk::simple::JoinSeriesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            },
            {
                "name": "origin",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "spacing",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "JoinSeries:_image1_image2_image3_image4_origin_spacing": {
        "name": "JoinSeries:_image1_image2_image3_image4_origin_spacing",
        "function_name": "JoinSeries",
        "description": "Join N-D images into an (N+1)-D image.\nThis function directly calls the execute method of JoinSeriesImageFilter in order to support a procedural API\nSee also\nitk::simple::JoinSeriesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "origin",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "spacing",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "JoinSeries:_image1_image2_image3_origin_spacing": {
        "name": "JoinSeries:_image1_image2_image3_origin_spacing",
        "function_name": "JoinSeries",
        "description": "Join N-D images into an (N+1)-D image.\nThis function directly calls the execute method of JoinSeriesImageFilter in order to support a procedural API\nSee also\nitk::simple::JoinSeriesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "origin",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "spacing",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "JoinSeries:_image1_image2_origin_spacing": {
        "name": "JoinSeries:_image1_image2_origin_spacing",
        "function_name": "JoinSeries",
        "description": "Join N-D images into an (N+1)-D image.\nThis function directly calls the execute method of JoinSeriesImageFilter in order to support a procedural API\nSee also\nitk::simple::JoinSeriesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "origin",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "spacing",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "JoinSeries:_image1_origin_spacing": {
        "name": "JoinSeries:_image1_origin_spacing",
        "function_name": "JoinSeries",
        "description": "Join N-D images into an (N+1)-D image.\nThis function directly calls the execute method of JoinSeriesImageFilter in order to support a procedural API\nSee also\nitk::simple::JoinSeriesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "origin",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "spacing",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "JoinSeries:_images_origin_spacing": {
        "name": "JoinSeries:_images_origin_spacing",
        "function_name": "JoinSeries",
        "description": "Join N-D images into an (N+1)-D image.\nThis function directly calls the execute method of JoinSeriesImageFilter in order to support a procedural API\nSee also\nitk::simple::JoinSeriesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            },
            {
                "name": "origin",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "spacing",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "KittlerIllingworthThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "KittlerIllingworthThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "KittlerIllingworthThreshold",
        "description": "Threshold an image using the KittlerIllingworth Threshold.\n\\ This function directly calls the execute method of KittlerIllingworthThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::KittlerIllingworthThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "KittlerIllingworthThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "KittlerIllingworthThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "KittlerIllingworthThreshold",
        "description": "Threshold an image using the KittlerIllingworth Threshold.\n\\ This function directly calls the execute method of KittlerIllingworthThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::KittlerIllingworthThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelContour:_image1_fullyConnected_backgroundValue": {
        "name": "LabelContour",
        "function_name": "LabelContour",
        "description": "Labels the pixels on the border of the objects in a labeled image.\n\\ This function directly calls the execute method of LabelContourImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelContourImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelImageToLabelMap:_image1_backgroundValue": {
        "name": "LabelImageToLabelMap",
        "function_name": "LabelImageToLabelMap",
        "description": "convert a labeled image to a label collection image\n\\ This function directly calls the execute method of LabelImageToLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::LabelImageToLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelMapContourOverlay:_labelMapImage_featureImage_opacity_dilationRadius_contourThickness_sliceDimension_contourType_priority_colormap": {
        "name": "LabelMapContourOverlay",
        "function_name": "LabelMapContourOverlay",
        "description": "Apply a colormap to the contours (outlines) of each object in a label map and superimpose it on top of the feature image.\n\\ This function directly calls the execute method of LabelMapContourOverlayImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelMapContourOverlayImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "labelMapImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "opacity",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "dilationRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "contourThickness",
                "default": "",
                "type": "str"
            },
            {
                "name": "sliceDimension",
                "default": 0,
                "type": "int"
            },
            {
                "name": "contourType",
                "default": "itk::simple::LabelMapContourOverlayImageFilter::CONTOUR",
                "type": "Path"
            },
            {
                "name": "priority",
                "default": "itk::simple::LabelMapContourOverlayImageFilter::HIGH_LABEL_ON_TOP",
                "type": "Path"
            },
            {
                "name": "colormap",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelMapMask:_labelMapImage_featureImage_label_backgroundValue_negated_crop_cropBorder": {
        "name": "LabelMapMask",
        "function_name": "LabelMapMask",
        "description": "Mask and image with a LabelMap .\n\\ This function directly calls the execute method of LabelMapMaskImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelMapMaskImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "labelMapImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "label",
                "default": 1,
                "type": "int"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "negated",
                "default": false,
                "type": "bool"
            },
            {
                "name": "crop",
                "default": false,
                "type": "bool"
            },
            {
                "name": "cropBorder",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelMapOverlay:_labelMapImage_featureImage_opacity_colormap": {
        "name": "LabelMapOverlay",
        "function_name": "LabelMapOverlay",
        "description": "Apply a colormap to a label map and superimpose it on an image.\n\\ This function directly calls the execute method of LabelMapOverlayImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelMapOverlayImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "labelMapImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "opacity",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "colormap",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelMapToBinary:_image1_backgroundValue_foregroundValue": {
        "name": "LabelMapToBinary",
        "function_name": "LabelMapToBinary",
        "description": "Convert a LabelMap to a binary image.\n\\ This function directly calls the execute method of LabelMapToBinaryImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelMapToBinaryImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelMapToLabel:_image1": {
        "name": "LabelMapToLabel",
        "function_name": "LabelMapToLabel",
        "description": "Converts a LabelMap to a labeled image.\n\\ This function directly calls the execute method of LabelMapToLabelImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelMapToLabelImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelMapToRGB:_image1_colormap": {
        "name": "LabelMapToRGB",
        "function_name": "LabelMapToRGB",
        "description": "Convert a LabelMap to a colored image.\n\\ This function directly calls the execute method of LabelMapToRGBImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelMapToRGBImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "colormap",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelOverlay:_image_labelImage_opacity_backgroundValue_colormap": {
        "name": "LabelOverlay",
        "function_name": "LabelOverlay",
        "description": "Apply a colormap to a label image and put it on top of the input image.\n\\ This function directly calls the execute method of LabelOverlayImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelOverlayImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "opacity",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "colormap",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelToRGB:_image1_backgroundValue_colormap": {
        "name": "LabelToRGB",
        "function_name": "LabelToRGB",
        "description": "Apply a colormap to a label image.\n\\ This function directly calls the execute method of LabelToRGBImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelToRGBImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "colormap",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelUniqueLabelMap:_image1_reverseOrdering": {
        "name": "LabelUniqueLabelMap",
        "function_name": "LabelUniqueLabelMap",
        "description": "Make sure that the objects are not overlapping.\n\\ This function directly calls the execute method of LabelUniqueLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::LabelUniqueLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "reverseOrdering",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelVoting:_image1_image2_image3_image4_image5_labelForUndecidedPixels": {
        "name": "LabelVoting:_image1_image2_image3_image4_image5_labelForUndecidedPixels",
        "function_name": "LabelVoting",
        "description": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of LabelVotingImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelVotingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelVoting:_image1_image2_image3_image4_labelForUndecidedPixels": {
        "name": "LabelVoting:_image1_image2_image3_image4_labelForUndecidedPixels",
        "function_name": "LabelVoting",
        "description": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of LabelVotingImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelVotingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelVoting:_image1_image2_image3_labelForUndecidedPixels": {
        "name": "LabelVoting:_image1_image2_image3_labelForUndecidedPixels",
        "function_name": "LabelVoting",
        "description": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of LabelVotingImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelVotingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelVoting:_image1_image2_labelForUndecidedPixels": {
        "name": "LabelVoting:_image1_image2_labelForUndecidedPixels",
        "function_name": "LabelVoting",
        "description": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of LabelVotingImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelVotingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelVoting:_image1_labelForUndecidedPixels": {
        "name": "LabelVoting:_image1_labelForUndecidedPixels",
        "function_name": "LabelVoting",
        "description": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of LabelVotingImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelVotingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LabelVoting:_images_labelForUndecidedPixels": {
        "name": "LabelVoting:_images_labelForUndecidedPixels",
        "function_name": "LabelVoting",
        "description": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of LabelVotingImageFilter in order to support a procedural API\nSee also\nitk::simple::LabelVotingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LandmarkBasedTransformInitializer:_transform_fixedLandmarks_movingLandmarks_landmarkWeight_referenceImage_numberOfControlPoints": {
        "name": "LandmarkBasedTransformInitializer",
        "function_name": "LandmarkBasedTransformInitializer",
        "description": "itk::simple::LandmarkBasedTransformInitializerFilter Procedural Interface\nThis function directly calls the execute method of LandmarkBasedTransformInitializerFilter in order to support a procedural API\nSee also\nitk::simple::LandmarkBasedTransformInitializerFilter for the object oriented interface",
        "inputs": [
            {
                "name": "transform",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fixedLandmarks",
                "default": "",
                "type": "str"
            },
            {
                "name": "movingLandmarks",
                "default": "",
                "type": "str"
            },
            {
                "name": "landmarkWeight",
                "default": "",
                "type": "str"
            },
            {
                "name": "referenceImage",
                "default": "Image()",
                "type": "Path"
            },
            {
                "name": "numberOfControlPoints",
                "default": 4,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "LandweberDeconvolution:_image1_image2_alpha_numberOfIterations_normalize_boundaryCondition_outputRegionMode": {
        "name": "LandweberDeconvolution",
        "function_name": "LandweberDeconvolution",
        "description": "Deconvolve an image using the Landweber deconvolution algorithm.\n\\ This function directly calls the execute method of LandweberDeconvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::LandweberDeconvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "alpha",
                "default": 0.1,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1,
                "type": "int"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::LandweberDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::LandweberDeconvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Laplacian:_image1_useImageSpacing": {
        "name": "Laplacian",
        "function_name": "Laplacian",
        "description": "This filter computes the Laplacian of a scalar-valued image.\n\\ This function directly calls the execute method of LaplacianImageFilter in order to support a procedural API\nSee also\nitk::simple::LaplacianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LaplacianRecursiveGaussian:_image1_sigma_normalizeAcrossScale": {
        "name": "LaplacianRecursiveGaussian",
        "function_name": "LaplacianRecursiveGaussian",
        "description": "Computes the Laplacian of Gaussian (LoG) of an image.\n\\ This function directly calls the execute method of LaplacianRecursiveGaussianImageFilter in order to support a procedural API\nSee also\nitk::simple::LaplacianRecursiveGaussianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sigma",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "normalizeAcrossScale",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LaplacianSegmentationLevelSet:_initialImage_featureImage_maximumRMSError_propagationScaling_curvatureScaling_numberOfIterations_reverseExpansionDirection": {
        "name": "LaplacianSegmentationLevelSet",
        "function_name": "LaplacianSegmentationLevelSet",
        "description": "Segments structures in images based on a second derivative image features.\n\\ This function directly calls the execute method of LaplacianSegmentationLevelSetImageFilter in order to support a procedural API\nSee also\nitk::simple::LaplacianSegmentationLevelSetImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "initialImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximumRMSError",
                "default": 0.02,
                "type": "float"
            },
            {
                "name": "propagationScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "curvatureScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            },
            {
                "name": "reverseExpansionDirection",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LaplacianSharpening:_image1_useImageSpacing": {
        "name": "LaplacianSharpening",
        "function_name": "LaplacianSharpening",
        "description": "This filter sharpens an image using a Laplacian. LaplacianSharpening highlights regions of rapid intensity change and therefore highlights or enhances the edges. The result is an image that appears more in focus.\n\\ This function directly calls the execute method of LaplacianSharpeningImageFilter in order to support a procedural API\nSee also\nitk::simple::LaplacianSharpeningImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Less:_image1_image2_backgroundValue_foregroundValue": {
        "name": "Less:_image1_image2_backgroundValue_foregroundValue",
        "function_name": "Less",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of LessImageFilter in order to support a procedural API\nSee also\nitk::simple::LessImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Less:_image1_constant_backgroundValue_foregroundValue": {
        "name": "Less:_image1_constant_backgroundValue_foregroundValue",
        "function_name": "Less",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Less:_constant_image2_backgroundValue_foregroundValue": {
        "name": "Less:_constant_image2_backgroundValue_foregroundValue",
        "function_name": "Less",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LessEqual:_image1_image2_backgroundValue_foregroundValue": {
        "name": "LessEqual:_image1_image2_backgroundValue_foregroundValue",
        "function_name": "LessEqual",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of LessEqualImageFilter in order to support a procedural API\nSee also\nitk::simple::LessEqualImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LessEqual:_image1_constant_backgroundValue_foregroundValue": {
        "name": "LessEqual:_image1_constant_backgroundValue_foregroundValue",
        "function_name": "LessEqual",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LessEqual:_constant_image2_backgroundValue_foregroundValue": {
        "name": "LessEqual:_constant_image2_backgroundValue_foregroundValue",
        "function_name": "LessEqual",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LiThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "LiThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "LiThreshold",
        "description": "Threshold an image using the Li Threshold.\n\\ This function directly calls the execute method of LiThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::LiThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "LiThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "LiThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "LiThreshold",
        "description": "Threshold an image using the Li Threshold.\n\\ This function directly calls the execute method of LiThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::LiThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Log:_image1": {
        "name": "Log",
        "function_name": "Log",
        "description": "Computes the log() of each pixel.\n\\ This function directly calls the execute method of LogImageFilter in order to support a procedural API\nSee also\nitk::simple::LogImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Log10:_image1": {
        "name": "Log10",
        "function_name": "Log10",
        "description": "Computes the log10 of each pixel.\n\\ This function directly calls the execute method of Log10ImageFilter in order to support a procedural API\nSee also\nitk::simple::Log10ImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MagnitudeAndPhaseToComplex:_image1_image2": {
        "name": "MagnitudeAndPhaseToComplex:_image1_image2",
        "function_name": "MagnitudeAndPhaseToComplex",
        "description": "Implements pixel-wise conversion of magnitude and phase data into complex voxels.\n\\ This function directly calls the execute method of MagnitudeAndPhaseToComplexImageFilter in order to support a procedural API\nSee also\nitk::simple::MagnitudeAndPhaseToComplexImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MagnitudeAndPhaseToComplex:_image1_constant": {
        "name": "MagnitudeAndPhaseToComplex:_image1_constant",
        "function_name": "MagnitudeAndPhaseToComplex",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MagnitudeAndPhaseToComplex:_constant_image2": {
        "name": "MagnitudeAndPhaseToComplex:_constant_image2",
        "function_name": "MagnitudeAndPhaseToComplex",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "make_scope_exit:_f": {
        "name": "make_scope_exit",
        "function_name": "make_scope_exit",
        "description": "Definition at line 277 of file sitkTemplateFunctions.h.",
        "inputs": [
            {
                "name": "f",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Mask:_image_maskImage_outsideValue_maskingValue": {
        "name": "Mask",
        "function_name": "Mask",
        "description": "Mask an image with a mask.\n\\ This function directly calls the execute method of MaskImageFilter in order to support a procedural API\nSee also\nitk::simple::MaskImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "outsideValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "maskingValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaskedAssign:_image_maskImage_assignImage_assignConstant": {
        "name": "MaskedAssign:_image_maskImage_assignImage_assignConstant",
        "function_name": "MaskedAssign",
        "description": "Mask an image with a mask.\n\\ This function directly calls the execute method of MaskedAssignImageFilter in order to support a procedural API\nSee also\nitk::simple::MaskedAssignImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "assignImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "assignConstant",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaskedAssign:_image_maskImage_assignConstant": {
        "name": "MaskedAssign:_image_maskImage_assignConstant",
        "function_name": "MaskedAssign",
        "description": "Mask an image with a mask.\n\\ This function directly calls the execute method of MaskedAssignImageFilter in order to support a procedural API\nSee also\nitk::simple::MaskedAssignImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "assignConstant",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaskedFFTNormalizedCorrelation:_fixedImage_movingImage_fixedImageMask_movingImageMask_requiredNumberOfOverlappingPixels_requiredFractionOfOverlappingPixels": {
        "name": "MaskedFFTNormalizedCorrelation",
        "function_name": "MaskedFFTNormalizedCorrelation",
        "description": "Calculate masked normalized cross correlation using FFTs.\n\\ This function directly calls the execute method of MaskedFFTNormalizedCorrelationImageFilter in order to support a procedural API\nSee also\nitk::simple::MaskedFFTNormalizedCorrelationImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "fixedImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fixedImageMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "movingImageMask",
                "default": "",
                "type": "Path"
            },
            {
                "name": "requiredNumberOfOverlappingPixels",
                "default": 0,
                "type": "int"
            },
            {
                "name": "requiredFractionOfOverlappingPixels",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaskNegated:_image_maskImage_outsideValue_maskingValue": {
        "name": "MaskNegated",
        "function_name": "MaskNegated",
        "description": "Mask an image with the negation (or logical compliment) of a mask.\n\\ This function directly calls the execute method of MaskNegatedImageFilter in order to support a procedural API\nSee also\nitk::simple::MaskNegatedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "outsideValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "maskingValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Maximum:_image1_image2": {
        "name": "Maximum:_image1_image2",
        "function_name": "Maximum",
        "description": "Implements a pixel-wise operator Max(a,b) between two images.\n\\ This function directly calls the execute method of MaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::MaximumImageFilter for the object oriented interface\nReferenced by itk::simple::InvertIntensityImageFilter::SetMaximum().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Maximum:_image1_constant": {
        "name": "Maximum:_image1_constant",
        "function_name": "Maximum",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Maximum:_constant_image2": {
        "name": "Maximum:_constant_image2",
        "function_name": "Maximum",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaximumEntropyThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "MaximumEntropyThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "MaximumEntropyThreshold",
        "description": "Threshold an image using the MaximumEntropy Threshold.\n\\ This function directly calls the execute method of MaximumEntropyThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::MaximumEntropyThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaximumEntropyThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "MaximumEntropyThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "MaximumEntropyThreshold",
        "description": "Threshold an image using the MaximumEntropy Threshold.\n\\ This function directly calls the execute method of MaximumEntropyThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::MaximumEntropyThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MaximumProjection:_image1_projectionDimension": {
        "name": "MaximumProjection",
        "function_name": "MaximumProjection",
        "description": "Maximum projection.\n\\ This function directly calls the execute method of MaximumProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::MaximumProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Mean:_image1_radius": {
        "name": "Mean",
        "function_name": "Mean",
        "description": "Applies an averaging filter to an image.\n\\ This function directly calls the execute method of MeanImageFilter in order to support a procedural API\nSee also\nitk::simple::MeanImageFilter for the object oriented interface\nReferenced by itk::simple::AdditiveGaussianNoiseImageFilter::SetMean(), itk::simple::GaussianImageSource::SetMean(), and itk::simple::GaborImageSource::SetMean().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MeanProjection:_image1_projectionDimension": {
        "name": "MeanProjection",
        "function_name": "MeanProjection",
        "description": "Mean projection.\n\\ This function directly calls the execute method of MeanProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::MeanProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Median:_image1_radius": {
        "name": "Median",
        "function_name": "Median",
        "description": "Applies a median filter to an image.\n\\ This function directly calls the execute method of MedianImageFilter in order to support a procedural API\nSee also\nitk::simple::MedianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MedianProjection:_image1_projectionDimension": {
        "name": "MedianProjection",
        "function_name": "MedianProjection",
        "description": "Median projection.\n\\ This function directly calls the execute method of MedianProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::MedianProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MergeLabelMap:_image1_image2_image3_image4_image5_method": {
        "name": "MergeLabelMap:_image1_image2_image3_image4_image5_method",
        "function_name": "MergeLabelMap",
        "description": "Merges several Label Maps.\nThis function directly calls the execute method of MergeLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::MergeLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            },
            {
                "name": "method",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MergeLabelMap:_image1_image2_image3_image4_method": {
        "name": "MergeLabelMap:_image1_image2_image3_image4_method",
        "function_name": "MergeLabelMap",
        "description": "Merges several Label Maps.\nThis function directly calls the execute method of MergeLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::MergeLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "method",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MergeLabelMap:_image1_image2_image3_method": {
        "name": "MergeLabelMap:_image1_image2_image3_method",
        "function_name": "MergeLabelMap",
        "description": "Merges several Label Maps.\nThis function directly calls the execute method of MergeLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::MergeLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "method",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MergeLabelMap:_image1_image2_method": {
        "name": "MergeLabelMap:_image1_image2_method",
        "function_name": "MergeLabelMap",
        "description": "Merges several Label Maps.\nThis function directly calls the execute method of MergeLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::MergeLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "method",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MergeLabelMap:_image1_method": {
        "name": "MergeLabelMap:_image1_method",
        "function_name": "MergeLabelMap",
        "description": "Merges several Label Maps.\nThis function directly calls the execute method of MergeLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::MergeLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "method",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MergeLabelMap:_images_method": {
        "name": "MergeLabelMap:_images_method",
        "function_name": "MergeLabelMap",
        "description": "Merges several Label Maps.\nThis function directly calls the execute method of MergeLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::MergeLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            },
            {
                "name": "method",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Minimum:_image1_image2": {
        "name": "Minimum:_image1_image2",
        "function_name": "Minimum",
        "description": "Implements a pixel-wise operator Min(a,b) between two images.\n\\ This function directly calls the execute method of MinimumImageFilter in order to support a procedural API\nSee also\nitk::simple::MinimumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Minimum:_image1_constant": {
        "name": "Minimum:_image1_constant",
        "function_name": "Minimum",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Minimum:_constant_image2": {
        "name": "Minimum:_constant_image2",
        "function_name": "Minimum",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MinimumProjection:_image1_projectionDimension": {
        "name": "MinimumProjection",
        "function_name": "MinimumProjection",
        "description": "Minimum projection.\n\\ This function directly calls the execute method of MinimumProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::MinimumProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MinMaxCurvatureFlow:_image1_timeStep_numberOfIterations_stencilRadius": {
        "name": "MinMaxCurvatureFlow",
        "function_name": "MinMaxCurvatureFlow",
        "description": "Denoise an image using min/max curvature flow.\n\\ This function directly calls the execute method of MinMaxCurvatureFlowImageFilter in order to support a procedural API\nSee also\nitk::simple::MinMaxCurvatureFlowImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "timeStep",
                "default": 0.05,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 5,
                "type": "int"
            },
            {
                "name": "stencilRadius",
                "default": 2,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MirrorPad:_image1_padLowerBound_padUpperBound_decayBase": {
        "name": "MirrorPad",
        "function_name": "MirrorPad",
        "description": "Increase the image size by padding with replicants of the input image value.\n\\ This function directly calls the execute method of MirrorPadImageFilter in order to support a procedural API\nSee also\nitk::simple::MirrorPadImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "padLowerBound",
                "default": "",
                "type": "str"
            },
            {
                "name": "padUpperBound",
                "default": "",
                "type": "str"
            },
            {
                "name": "decayBase",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Modulus:_image1_image2": {
        "name": "Modulus:_image1_image2",
        "function_name": "Modulus",
        "description": "Computes the modulus (x % dividend) pixel-wise.\n\\ This function directly calls the execute method of ModulusImageFilter in order to support a procedural API\nSee also\nitk::simple::ModulusImageFilter for the object oriented interface\nReferenced by operator%(), and operator%=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Modulus:_image1_constant": {
        "name": "Modulus:_image1_constant",
        "function_name": "Modulus",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Modulus:_constant_image2": {
        "name": "Modulus:_constant_image2",
        "function_name": "Modulus",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "int"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MomentsThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "MomentsThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "MomentsThreshold",
        "description": "Threshold an image using the Moments Threshold.\n\\ This function directly calls the execute method of MomentsThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::MomentsThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MomentsThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "MomentsThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "MomentsThreshold",
        "description": "Threshold an image using the Moments Threshold.\n\\ This function directly calls the execute method of MomentsThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::MomentsThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MorphologicalGradient:_image1_kernelRadius_kernelType": {
        "name": "MorphologicalGradient",
        "function_name": "MorphologicalGradient",
        "description": "Compute the gradient of a grayscale image.\n\\ This function directly calls the execute method of MorphologicalGradientImageFilter in order to support a procedural API\nSee also\nitk::simple::MorphologicalGradientImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MorphologicalWatershed:_image1_level_markWatershedLine_fullyConnected": {
        "name": "MorphologicalWatershed",
        "function_name": "MorphologicalWatershed",
        "description": "Watershed segmentation implementation with morphological operators.\n\\ This function directly calls the execute method of MorphologicalWatershedImageFilter in order to support a procedural API\nSee also\nitk::simple::MorphologicalWatershedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "level",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "markWatershedLine",
                "default": true,
                "type": "bool"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MorphologicalWatershedFromMarkers:_image_markerImage_markWatershedLine_fullyConnected": {
        "name": "MorphologicalWatershedFromMarkers",
        "function_name": "MorphologicalWatershedFromMarkers",
        "description": "Morphological watershed transform from markers.\n\\ This function directly calls the execute method of MorphologicalWatershedFromMarkersImageFilter in order to support a procedural API\nSee also\nitk::simple::MorphologicalWatershedFromMarkersImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "markerImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "markWatershedLine",
                "default": true,
                "type": "bool"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MultiLabelSTAPLE:_image1_image2_image3_image4_image5_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities": {
        "name": "MultiLabelSTAPLE:_image1_image2_image3_image4_image5_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities",
        "function_name": "MultiLabelSTAPLE",
        "description": "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of MultiLabelSTAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiLabelSTAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            },
            {
                "name": "terminationUpdateThreshold",
                "default": 1e-05,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "int"
            },
            {
                "name": "priorProbabilities",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MultiLabelSTAPLE:_image1_image2_image3_image4_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities": {
        "name": "MultiLabelSTAPLE:_image1_image2_image3_image4_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities",
        "function_name": "MultiLabelSTAPLE",
        "description": "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of MultiLabelSTAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiLabelSTAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            },
            {
                "name": "terminationUpdateThreshold",
                "default": 1e-05,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "int"
            },
            {
                "name": "priorProbabilities",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MultiLabelSTAPLE:_image1_image2_image3_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities": {
        "name": "MultiLabelSTAPLE:_image1_image2_image3_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities",
        "function_name": "MultiLabelSTAPLE",
        "description": "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of MultiLabelSTAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiLabelSTAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            },
            {
                "name": "terminationUpdateThreshold",
                "default": 1e-05,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "int"
            },
            {
                "name": "priorProbabilities",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MultiLabelSTAPLE:_image1_image2_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities": {
        "name": "MultiLabelSTAPLE:_image1_image2_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities",
        "function_name": "MultiLabelSTAPLE",
        "description": "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of MultiLabelSTAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiLabelSTAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            },
            {
                "name": "terminationUpdateThreshold",
                "default": 1e-05,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "int"
            },
            {
                "name": "priorProbabilities",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MultiLabelSTAPLE:_image1_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities": {
        "name": "MultiLabelSTAPLE:_image1_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities",
        "function_name": "MultiLabelSTAPLE",
        "description": "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of MultiLabelSTAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiLabelSTAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            },
            {
                "name": "terminationUpdateThreshold",
                "default": 1e-05,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "int"
            },
            {
                "name": "priorProbabilities",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "MultiLabelSTAPLE:_images_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities": {
        "name": "MultiLabelSTAPLE:_images_labelForUndecidedPixels_terminationUpdateThreshold_maximumNumberOfIterations_priorProbabilities",
        "function_name": "MultiLabelSTAPLE",
        "description": "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).\nThis function directly calls the execute method of MultiLabelSTAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiLabelSTAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            },
            {
                "name": "labelForUndecidedPixels",
                "default": "",
                "type": "int"
            },
            {
                "name": "terminationUpdateThreshold",
                "default": 1e-05,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "int"
            },
            {
                "name": "priorProbabilities",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Multiply:_image1_image2": {
        "name": "Multiply:_image1_image2",
        "function_name": "Multiply",
        "description": "Pixel-wise multiplication of two images.\n\\ This function directly calls the execute method of MultiplyImageFilter in order to support a procedural API\nSee also\nitk::simple::MultiplyImageFilter for the object oriented interface\nReferenced by operator*(), and operator*=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Multiply:_image1_constant": {
        "name": "Multiply:_image1_constant",
        "function_name": "Multiply",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Multiply:_constant_image2": {
        "name": "Multiply:_constant_image2",
        "function_name": "Multiply",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "N4BiasFieldCorrection:_image_maskImage_convergenceThreshold_maximumNumberOfIterations_biasFieldFullWidthAtHalfMaximum_wienerFilterNoise_numberOfHistogramBins_numberOfControlPoints_splineOrder_useMaskLabel_maskLabel": {
        "name": "N4BiasFieldCorrection:_image_maskImage_convergenceThreshold_maximumNumberOfIterations_biasFieldFullWidthAtHalfMaximum_wienerFilterNoise_numberOfHistogramBins_numberOfControlPoints_splineOrder_useMaskLabel_maskLabel",
        "function_name": "N4BiasFieldCorrection",
        "description": "Implementation of the N4 bias field correction algorithm.\n\\ This function directly calls the execute method of N4BiasFieldCorrectionImageFilter in order to support a procedural API\nSee also\nitk::simple::N4BiasFieldCorrectionImageFilter for the object oriented interface\nExamples\nN4BiasFieldCorrection/N4BiasFieldCorrection.cs.",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "convergenceThreshold",
                "default": 0.001,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "str"
            },
            {
                "name": "biasFieldFullWidthAtHalfMaximum",
                "default": 0.15,
                "type": "float"
            },
            {
                "name": "wienerFilterNoise",
                "default": 0.01,
                "type": "float"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 200,
                "type": "int"
            },
            {
                "name": "numberOfControlPoints",
                "default": "",
                "type": "str"
            },
            {
                "name": "splineOrder",
                "default": 3,
                "type": "int"
            },
            {
                "name": "useMaskLabel",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskLabel",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "N4BiasFieldCorrection:_image_convergenceThreshold_maximumNumberOfIterations_biasFieldFullWidthAtHalfMaximum_wienerFilterNoise_numberOfHistogramBins_numberOfControlPoints_splineOrder_useMaskLabel_maskLabel": {
        "name": "N4BiasFieldCorrection:_image_convergenceThreshold_maximumNumberOfIterations_biasFieldFullWidthAtHalfMaximum_wienerFilterNoise_numberOfHistogramBins_numberOfControlPoints_splineOrder_useMaskLabel_maskLabel",
        "function_name": "N4BiasFieldCorrection",
        "description": "Implementation of the N4 bias field correction algorithm.\n\\ This function directly calls the execute method of N4BiasFieldCorrectionImageFilter in order to support a procedural API\nSee also\nitk::simple::N4BiasFieldCorrectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "convergenceThreshold",
                "default": 0.001,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": "",
                "type": "str"
            },
            {
                "name": "biasFieldFullWidthAtHalfMaximum",
                "default": 0.15,
                "type": "float"
            },
            {
                "name": "wienerFilterNoise",
                "default": 0.01,
                "type": "float"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 200,
                "type": "int"
            },
            {
                "name": "numberOfControlPoints",
                "default": "",
                "type": "str"
            },
            {
                "name": "splineOrder",
                "default": 3,
                "type": "int"
            },
            {
                "name": "useMaskLabel",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskLabel",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryAdd:_image1": {
        "name": "NaryAdd:_image1",
        "function_name": "NaryAdd",
        "description": "Pixel-wise addition of N images.\nThis function directly calls the execute method of NaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryAdd:_image1_image2": {
        "name": "NaryAdd:_image1_image2",
        "function_name": "NaryAdd",
        "description": "Pixel-wise addition of N images.\nThis function directly calls the execute method of NaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryAdd:_image1_image2_image3": {
        "name": "NaryAdd:_image1_image2_image3",
        "function_name": "NaryAdd",
        "description": "Pixel-wise addition of N images.\nThis function directly calls the execute method of NaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryAdd:_image1_image2_image3_image4": {
        "name": "NaryAdd:_image1_image2_image3_image4",
        "function_name": "NaryAdd",
        "description": "Pixel-wise addition of N images.\nThis function directly calls the execute method of NaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryAdd:_image1_image2_image3_image4_image5": {
        "name": "NaryAdd:_image1_image2_image3_image4_image5",
        "function_name": "NaryAdd",
        "description": "Pixel-wise addition of N images.\nThis function directly calls the execute method of NaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryAdd:_images": {
        "name": "NaryAdd:_images",
        "function_name": "NaryAdd",
        "description": "Pixel-wise addition of N images.\nThis function directly calls the execute method of NaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryMaximum:_image1": {
        "name": "NaryMaximum:_image1",
        "function_name": "NaryMaximum",
        "description": "Computes the pixel-wise maximum of several images.\nThis function directly calls the execute method of NaryMaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryMaximumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryMaximum:_image1_image2": {
        "name": "NaryMaximum:_image1_image2",
        "function_name": "NaryMaximum",
        "description": "Computes the pixel-wise maximum of several images.\nThis function directly calls the execute method of NaryMaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryMaximumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryMaximum:_image1_image2_image3": {
        "name": "NaryMaximum:_image1_image2_image3",
        "function_name": "NaryMaximum",
        "description": "Computes the pixel-wise maximum of several images.\nThis function directly calls the execute method of NaryMaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryMaximumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryMaximum:_image1_image2_image3_image4": {
        "name": "NaryMaximum:_image1_image2_image3_image4",
        "function_name": "NaryMaximum",
        "description": "Computes the pixel-wise maximum of several images.\nThis function directly calls the execute method of NaryMaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryMaximumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryMaximum:_image1_image2_image3_image4_image5": {
        "name": "NaryMaximum:_image1_image2_image3_image4_image5",
        "function_name": "NaryMaximum",
        "description": "Computes the pixel-wise maximum of several images.\nThis function directly calls the execute method of NaryMaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryMaximumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NaryMaximum:_images": {
        "name": "NaryMaximum:_images",
        "function_name": "NaryMaximum",
        "description": "Computes the pixel-wise maximum of several images.\nThis function directly calls the execute method of NaryMaximumImageFilter in order to support a procedural API\nSee also\nitk::simple::NaryMaximumImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NeighborhoodConnected:_image1_seedList_lower_upper_radius_replaceValue": {
        "name": "NeighborhoodConnected",
        "function_name": "NeighborhoodConnected",
        "description": "Label pixels that are connected to a seed and lie within a neighborhood.\n\\ This function directly calls the execute method of NeighborhoodConnectedImageFilter in order to support a procedural API\nSee also\nitk::simple::NeighborhoodConnectedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seedList",
                "default": "",
                "type": "str"
            },
            {
                "name": "lower",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upper",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "replaceValue",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Noise:_image1_radius": {
        "name": "Noise",
        "function_name": "Noise",
        "description": "Calculate the local noise in an image.\n\\ This function directly calls the execute method of NoiseImageFilter in order to support a procedural API\nSee also\nitk::simple::NoiseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Normalize:_image1": {
        "name": "Normalize",
        "function_name": "Normalize",
        "description": "Normalize an image by setting its mean to zero and variance to one.\n\\ This function directly calls the execute method of NormalizeImageFilter in order to support a procedural API\nSee also\nitk::simple::NormalizeImageFilter for the object oriented interface\nExamples\nImageRegistrationMethod2/ImageRegistrationMethod2.cxx.\nReferenced by itk::simple::ConvolutionImageFilter::SetNormalize(), itk::simple::FFTConvolutionImageFilter::SetNormalize(), itk::simple::InverseDeconvolutionImageFilter::SetNormalize(), itk::simple::TikhonovDeconvolutionImageFilter::SetNormalize(), itk::simple::WienerDeconvolutionImageFilter::SetNormalize(), itk::simple::RichardsonLucyDeconvolutionImageFilter::SetNormalize(), itk::simple::ProjectedLandweberDeconvolutionImageFilter::SetNormalize(), and itk::simple::LandweberDeconvolutionImageFilter::SetNormalize().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NormalizedCorrelation:_image_maskImage_templateImage": {
        "name": "NormalizedCorrelation",
        "function_name": "NormalizedCorrelation",
        "description": "Computes the normalized correlation of an image and a template.\n\\ This function directly calls the execute method of NormalizedCorrelationImageFilter in order to support a procedural API\nSee also\nitk::simple::NormalizedCorrelationImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "templateImage",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NormalizeToConstant:_image1_constant": {
        "name": "NormalizeToConstant",
        "function_name": "NormalizeToConstant",
        "description": "Scales image pixel intensities to make the sum of all pixels equal a user-defined constant.\n\\ This function directly calls the execute method of NormalizeToConstantImageFilter in order to support a procedural API\nSee also\nitk::simple::NormalizeToConstantImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": 1.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Not:_image1": {
        "name": "Not",
        "function_name": "Not",
        "description": "Implements the NOT logical operator pixel-wise on an image.\n\\ This function directly calls the execute method of NotImageFilter in order to support a procedural API\nSee also\nitk::simple::NotImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NotEqual:_image1_image2_backgroundValue_foregroundValue": {
        "name": "NotEqual:_image1_image2_backgroundValue_foregroundValue",
        "function_name": "NotEqual",
        "description": "Implements pixel-wise generic operation of two images, or of an image and a constant.\n\\ This function directly calls the execute method of NotEqualImageFilter in order to support a procedural API\nSee also\nitk::simple::NotEqualImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NotEqual:_image1_constant_backgroundValue_foregroundValue": {
        "name": "NotEqual:_image1_constant_backgroundValue_foregroundValue",
        "function_name": "NotEqual",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "NotEqual:_constant_image2_backgroundValue_foregroundValue": {
        "name": "NotEqual:_constant_image2_backgroundValue_foregroundValue",
        "function_name": "NotEqual",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ObjectnessMeasure:_image1_alpha_beta_gamma_scaleObjectnessMeasure_objectDimension_brightObject": {
        "name": "ObjectnessMeasure",
        "function_name": "ObjectnessMeasure",
        "description": "Enhance M-dimensional objects in N-dimensional images.\n\\ This function directly calls the execute method of ObjectnessMeasureImageFilter in order to support a procedural API\nSee also\nitk::simple::ObjectnessMeasureImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "alpha",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "beta",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "gamma",
                "default": 5.0,
                "type": "float"
            },
            {
                "name": "scaleObjectnessMeasure",
                "default": true,
                "type": "bool"
            },
            {
                "name": "objectDimension",
                "default": 1,
                "type": "int"
            },
            {
                "name": "brightObject",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "OpeningByReconstruction:_image1_kernelRadius_kernelType_fullyConnected_preserveIntensities": {
        "name": "OpeningByReconstruction",
        "function_name": "OpeningByReconstruction",
        "description": "Opening by reconstruction of an image.\n\\ This function directly calls the execute method of OpeningByReconstructionImageFilter in order to support a procedural API\nSee also\nitk::simple::OpeningByReconstructionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "preserveIntensities",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator%:_img_s": {
        "name": "operator%:_img_s",
        "function_name": "operator%",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 160 of file sitkImageOperators.h.\nReferences Modulus().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator%:_img1_img2": {
        "name": "operator%:_img1_img2",
        "function_name": "operator%",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 150 of file sitkImageOperators.h.\nReferences Modulus().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator%:_s_img": {
        "name": "operator%:_s_img",
        "function_name": "operator%",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 165 of file sitkImageOperators.h.\nReferences Modulus().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "int"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator%=:_img1_img2": {
        "name": "operator%=:_img1_img2",
        "function_name": "operator%=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 321 of file sitkImageOperators.h.\nReferences Modulus(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator%=:_img1_s": {
        "name": "operator%=:_img1_s",
        "function_name": "operator%=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 327 of file sitkImageOperators.h.\nReferences Modulus(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator&:_img_s": {
        "name": "operator&:_img_s",
        "function_name": "operator&",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 209 of file sitkImageOperators.h.\nReferences And().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator&:_img1_img2": {
        "name": "operator&:_img1_img2",
        "function_name": "operator&",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 199 of file sitkImageOperators.h.\nReferences And().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator&:_s_img": {
        "name": "operator&:_s_img",
        "function_name": "operator&",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 214 of file sitkImageOperators.h.\nReferences And().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "int"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator&=:_img1_img2": {
        "name": "operator&=:_img1_img2",
        "function_name": "operator&=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 333 of file sitkImageOperators.h.\nReferences And(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator&=:_img1_s": {
        "name": "operator&=:_img1_s",
        "function_name": "operator&=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 339 of file sitkImageOperators.h.\nReferences And(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator*:_img_s": {
        "name": "operator*:_img_s",
        "function_name": "operator*",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 110 of file sitkImageOperators.h.\nReferences Multiply().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator*:_img1_img2": {
        "name": "operator*:_img1_img2",
        "function_name": "operator*",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 100 of file sitkImageOperators.h.\nReferences Multiply().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator*:_s_img": {
        "name": "operator*:_s_img",
        "function_name": "operator*",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 115 of file sitkImageOperators.h.\nReferences Multiply().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "float"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator*=:_img1_img2": {
        "name": "operator*=:_img1_img2",
        "function_name": "operator*=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 297 of file sitkImageOperators.h.\nReferences Multiply(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator*=:_img1_s": {
        "name": "operator*=:_img1_s",
        "function_name": "operator*=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 303 of file sitkImageOperators.h.\nReferences Multiply(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator+:_img_s": {
        "name": "operator+:_img_s",
        "function_name": "operator+",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 60 of file sitkImageOperators.h.\nReferences Add().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator+:_img1_img2": {
        "name": "operator+:_img1_img2",
        "function_name": "operator+",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 50 of file sitkImageOperators.h.\nReferences Add().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator+:_s_img": {
        "name": "operator+:_s_img",
        "function_name": "operator+",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 65 of file sitkImageOperators.h.\nReferences Add().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "float"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator+=:_img1_img2": {
        "name": "operator+=:_img1_img2",
        "function_name": "operator+=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 273 of file sitkImageOperators.h.\nReferences Add(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator+=:_img1_s": {
        "name": "operator+=:_img1_s",
        "function_name": "operator+=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 279 of file sitkImageOperators.h.\nReferences Add(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator-:_img": {
        "name": "operator-:_img",
        "function_name": "operator-",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 176 of file sitkImageOperators.h.\nReferences UnaryMinus().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator-:_img_s": {
        "name": "operator-:_img_s",
        "function_name": "operator-",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 85 of file sitkImageOperators.h.\nReferences Subtract().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator-:_img1_img2": {
        "name": "operator-:_img1_img2",
        "function_name": "operator-",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 75 of file sitkImageOperators.h.\nReferences Subtract().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator-:_s_img": {
        "name": "operator-:_s_img",
        "function_name": "operator-",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 90 of file sitkImageOperators.h.\nReferences Subtract().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "float"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator-=:_img1_img2": {
        "name": "operator-=:_img1_img2",
        "function_name": "operator-=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 285 of file sitkImageOperators.h.\nReferences itk::simple::Image::ProxyForInPlaceOperation(), and Subtract().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator-=:_img1_s": {
        "name": "operator-=:_img1_s",
        "function_name": "operator-=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 291 of file sitkImageOperators.h.\nReferences itk::simple::Image::ProxyForInPlaceOperation(), and Subtract().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator/:_img_s": {
        "name": "operator/:_img_s",
        "function_name": "operator/",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 135 of file sitkImageOperators.h.\nReferences Divide().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator/:_img1_img2": {
        "name": "operator/:_img1_img2",
        "function_name": "operator/",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 125 of file sitkImageOperators.h.\nReferences Divide().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator/:_s_img": {
        "name": "operator/:_s_img",
        "function_name": "operator/",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 140 of file sitkImageOperators.h.\nReferences Divide().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "float"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator/=:_img1_img2": {
        "name": "operator/=:_img1_img2",
        "function_name": "operator/=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 309 of file sitkImageOperators.h.\nReferences Divide(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator/=:_img1_s": {
        "name": "operator/=:_img1_s",
        "function_name": "operator/=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 315 of file sitkImageOperators.h.\nReferences Divide(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator<<:_os_k": {
        "name": "operator<<:_os_k",
        "function_name": "operator<<",
        "description": "",
        "inputs": [
            {
                "name": "os",
                "default": "",
                "type": "str"
            },
            {
                "name": "k",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator<<:_os_i": {
        "name": "operator<<:_os_i",
        "function_name": "operator<<",
        "description": "Convert Interpolator enum to a string for printing etc..",
        "inputs": [
            {
                "name": "os",
                "default": "",
                "type": "str"
            },
            {
                "name": "i",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator<<:_os_id": {
        "name": "operator<<:_os_id",
        "function_name": "operator<<",
        "description": "",
        "inputs": [
            {
                "name": "os",
                "default": "",
                "type": "str"
            },
            {
                "name": "id",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator<<:_os_v": {
        "name": "operator<<:_os_v",
        "function_name": "operator<<",
        "description": "Output the element of an std::vector to the output stream.\nThe elements of the std::vector are required to have operator<<.\nThe format of the output should be \"[ T, T, T ]\".\nDefinition at line 58 of file sitkTemplateFunctions.h.",
        "inputs": [
            {
                "name": "os",
                "default": "",
                "type": "str"
            },
            {
                "name": "v",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator^:_img_s": {
        "name": "operator^:_img_s",
        "function_name": "operator^",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 261 of file sitkImageOperators.h.\nReferences Xor().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator^:_img1_img2": {
        "name": "operator^:_img1_img2",
        "function_name": "operator^",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 251 of file sitkImageOperators.h.\nReferences Xor().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator^:_s_img": {
        "name": "operator^:_s_img",
        "function_name": "operator^",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 266 of file sitkImageOperators.h.\nReferences Xor().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "int"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator^=:_img1_img2": {
        "name": "operator^=:_img1_img2",
        "function_name": "operator^=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 357 of file sitkImageOperators.h.\nReferences itk::simple::Image::ProxyForInPlaceOperation(), and Xor().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator^=:_img1_s": {
        "name": "operator^=:_img1_s",
        "function_name": "operator^=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 363 of file sitkImageOperators.h.\nReferences itk::simple::Image::ProxyForInPlaceOperation(), and Xor().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator|:_img_s": {
        "name": "operator|:_img_s",
        "function_name": "operator|",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 235 of file sitkImageOperators.h.\nReferences Or().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator|:_img1_img2": {
        "name": "operator|:_img1_img2",
        "function_name": "operator|",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 225 of file sitkImageOperators.h.\nReferences Or().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator|:_s_img": {
        "name": "operator|:_s_img",
        "function_name": "operator|",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 240 of file sitkImageOperators.h.\nReferences Or().",
        "inputs": [
            {
                "name": "s",
                "default": "",
                "type": "int"
            },
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "operator|=:_img1_img2": {
        "name": "operator|=:_img1_img2",
        "function_name": "operator|=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 345 of file sitkImageOperators.h.\nReferences Or(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "img2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator|=:_img1_s": {
        "name": "operator|=:_img1_s",
        "function_name": "operator|=",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 351 of file sitkImageOperators.h.\nReferences Or(), and itk::simple::Image::ProxyForInPlaceOperation().",
        "inputs": [
            {
                "name": "img1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "s",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "operator~:_img": {
        "name": "operator~",
        "function_name": "operator~",
        "description": "Performs the operator on a per pixel basis.\nAll overloaded simpleITK operators are performed on a per-pixel basis, and implemented with the corresponding image filters. These operators generally don't work with label images, and the logical operators don't work with images of real components or vector images.\nDefinition at line 188 of file sitkImageOperators.h.\nReferences BitwiseNot().",
        "inputs": [
            {
                "name": "img",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Or:_image1_image2": {
        "name": "Or:_image1_image2",
        "function_name": "Or",
        "description": "Implements the OR bitwise operator pixel-wise between two images.\n\\ This function directly calls the execute method of OrImageFilter in order to support a procedural API\nSee also\nitk::simple::OrImageFilter for the object oriented interface\nReferenced by operator|(), and operator|=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Or:_image1_constant": {
        "name": "Or:_image1_constant",
        "function_name": "Or",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Or:_constant_image2": {
        "name": "Or:_constant_image2",
        "function_name": "Or",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "int"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "OtsuMultipleThresholds:_image1_numberOfThresholds_labelOffset_numberOfHistogramBins_valleyEmphasis_returnBinMidpoint": {
        "name": "OtsuMultipleThresholds",
        "function_name": "OtsuMultipleThresholds",
        "description": "Threshold an image using multiple Otsu Thresholds.\n\\ This function directly calls the execute method of OtsuMultipleThresholdsImageFilter in order to support a procedural API\nSee also\nitk::simple::OtsuMultipleThresholdsImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "numberOfThresholds",
                "default": 1,
                "type": "int"
            },
            {
                "name": "labelOffset",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 128,
                "type": "int"
            },
            {
                "name": "valleyEmphasis",
                "default": false,
                "type": "bool"
            },
            {
                "name": "returnBinMidpoint",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "OtsuThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue_returnBinMidpoint": {
        "name": "OtsuThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue_returnBinMidpoint",
        "function_name": "OtsuThreshold",
        "description": "Threshold an image using the Otsu Threshold.\n\\ This function directly calls the execute method of OtsuThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::OtsuThresholdImageFilter for the object oriented interface\nExamples\nN4BiasFieldCorrection/N4BiasFieldCorrection.cxx.",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 128,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            },
            {
                "name": "returnBinMidpoint",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "OtsuThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue_returnBinMidpoint": {
        "name": "OtsuThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue_returnBinMidpoint",
        "function_name": "OtsuThreshold",
        "description": "Threshold an image using the Otsu Threshold.\n\\ This function directly calls the execute method of OtsuThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::OtsuThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 128,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            },
            {
                "name": "returnBinMidpoint",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Paste:_destinationImage_sourceImage_sourceSize_sourceIndex_destinationIndex_DestinationSkipAxes": {
        "name": "Paste",
        "function_name": "Paste",
        "description": "Paste an image into another image.\n\\ This function directly calls the execute method of PasteImageFilter in order to support a procedural API\nSee also\nitk::simple::PasteImageFilter for the object oriented interface\nExamples\nHelloWorld/HelloWorld.cxx.",
        "inputs": [
            {
                "name": "destinationImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sourceImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sourceSize",
                "default": "",
                "type": "str"
            },
            {
                "name": "sourceIndex",
                "default": "",
                "type": "str"
            },
            {
                "name": "destinationIndex",
                "default": "",
                "type": "str"
            },
            {
                "name": "DestinationSkipAxes",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "PatchBasedDenoising:_image1_kernelBandwidthSigma_patchRadius_numberOfIterations_numberOfSamplePatches_sampleVariance": {
        "name": "PatchBasedDenoising:_image1_kernelBandwidthSigma_patchRadius_numberOfIterations_numberOfSamplePatches_sampleVariance",
        "function_name": "PatchBasedDenoising",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelBandwidthSigma",
                "default": 400.0,
                "type": "float"
            },
            {
                "name": "patchRadius",
                "default": 4,
                "type": "int"
            },
            {
                "name": "numberOfIterations",
                "default": 1,
                "type": "int"
            },
            {
                "name": "numberOfSamplePatches",
                "default": 200,
                "type": "int"
            },
            {
                "name": "sampleVariance",
                "default": 400.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "PatchBasedDenoising:_image1_noiseModel_kernelBandwidthSigma_patchRadius_numberOfIterations_numberOfSamplePatches_sampleVariance_noiseSigma_noiseModelFidelityWeight": {
        "name": "PatchBasedDenoising:_image1_noiseModel_kernelBandwidthSigma_patchRadius_numberOfIterations_numberOfSamplePatches_sampleVariance_noiseSigma_noiseModelFidelityWeight",
        "function_name": "PatchBasedDenoising",
        "description": "itk::simple::PatchBasedDenoisingImageFilter Procedural Interface\nThis function directly calls the execute method of PatchBasedDenoisingImageFilter in order to support a procedural API\nSee also\nitk::simple::PatchBasedDenoisingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "noiseModel",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelBandwidthSigma",
                "default": 400.0,
                "type": "float"
            },
            {
                "name": "patchRadius",
                "default": 4,
                "type": "int"
            },
            {
                "name": "numberOfIterations",
                "default": 1,
                "type": "int"
            },
            {
                "name": "numberOfSamplePatches",
                "default": 200,
                "type": "int"
            },
            {
                "name": "sampleVariance",
                "default": 400.0,
                "type": "float"
            },
            {
                "name": "noiseSigma",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "noiseModelFidelityWeight",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "PermuteAxes:_image1_order": {
        "name": "PermuteAxes",
        "function_name": "PermuteAxes",
        "description": "Permutes the image axes according to a user specified order.\n\\ This function directly calls the execute method of PermuteAxesImageFilter in order to support a procedural API\nSee also\nitk::simple::PermuteAxesImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "order",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "PhysicalPointSource:_outputPixelType_size_origin_spacing_direction": {
        "name": "PhysicalPointSource",
        "function_name": "PhysicalPointSource",
        "description": "Generate an image of the physical locations of each pixel.\nThis function directly calls the execute method of PhysicalPointImageSource in order to support a procedural API\nSee also\nitk::simple::PhysicalPointImageSource for the object oriented interface",
        "inputs": [
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "origin",
                "default": "",
                "type": "str"
            },
            {
                "name": "spacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "direction",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Pow:_image1_image2": {
        "name": "Pow:_image1_image2",
        "function_name": "Pow",
        "description": "Computes the powers of 2 images.\n\\ This function directly calls the execute method of PowImageFilter in order to support a procedural API\nSee also\nitk::simple::PowImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Pow:_image1_constant": {
        "name": "Pow:_image1_constant",
        "function_name": "Pow",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Pow:_constant_image2": {
        "name": "Pow:_constant_image2",
        "function_name": "Pow",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "PrintParameterMap:_parameterMap": {
        "name": "PrintParameterMap:_parameterMap",
        "function_name": "PrintParameterMap",
        "description": "",
        "inputs": [
            {
                "name": "parameterMap",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "PrintParameterMap:_parameterMapVector": {
        "name": "PrintParameterMap:_parameterMapVector",
        "function_name": "PrintParameterMap",
        "description": "",
        "inputs": [
            {
                "name": "parameterMapVector",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ProjectedLandweberDeconvolution:_image1_image2_alpha_numberOfIterations_normalize_boundaryCondition_outputRegionMode": {
        "name": "ProjectedLandweberDeconvolution",
        "function_name": "ProjectedLandweberDeconvolution",
        "description": "Deconvolve an image using the projected Landweber deconvolution algorithm.\n\\ This function directly calls the execute method of ProjectedLandweberDeconvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::ProjectedLandweberDeconvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "alpha",
                "default": 0.1,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1,
                "type": "int"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::ProjectedLandweberDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::ProjectedLandweberDeconvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Rank:_image1_rank_radius_kernelType": {
        "name": "Rank",
        "function_name": "Rank",
        "description": "Rank filter of a greyscale image.\n\\ This function directly calls the execute method of RankImageFilter in order to support a procedural API\nSee also\nitk::simple::RankImageFilter for the object oriented interface\nReferenced by itk::simple::FastApproximateRankImageFilter::SetRank(), and itk::simple::RankImageFilter::SetRank().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "rank",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ReadImage:_filename_outputPixelType_imageIO": {
        "name": "ReadImage:_filename_outputPixelType_imageIO",
        "function_name": "ReadImage",
        "description": "ReadImage is a procedural interface to the ImageFileReader class which is convenient for most image reading tasks.\nParameters\nfilename\nthe filename of an Image e.g. \"cthead.mha\"\noutputPixelType\nsee ImageReaderBase::SetOutputPixelType\nimageIO\nsee ImageReaderBase::SetImageIO\nSee also\nitk::simple::ImageFileReader for reading a single file.\nitk::simple::ImageSeriesReader for reading a series and meta-data dictionaries.\nExamples\nDemonsRegistration1/DemonsRegistration1.cxx, DemonsRegistration2/DemonsRegistration2.cxx, FastMarchingSegmentation/FastMarchingSegmentation.cxx, ImageRegistrationMethod1/ImageRegistrationMethod1.cxx, ImageRegistrationMethod2/ImageRegistrationMethod2.cxx, ImageRegistrationMethodBSpline1/ImageRegistrationMethodBSpline1.cxx, ImageRegistrationMethodBSpline3/ImageRegistrationMethodBSpline3.cxx, ImageRegistrationMethodDisplacement1/ImageRegistrationMethodDisplacement1.cxx, N4BiasFieldCorrection/N4BiasFieldCorrection.cxx, SimpleGaussianFunctional.cxx, SimpleIO/SimpleIO.cxx, and SliceBySliceDecorator/SliceBySliceDecorator.cxx.",
        "inputs": [
            {
                "name": "filename",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "imageIO",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ReadImage:_fileNames_outputPixelType_imageIO": {
        "name": "ReadImage:_fileNames_outputPixelType_imageIO",
        "function_name": "ReadImage",
        "description": "ReadImage is a procedural interface to the ImageSeriesReader class which is convenient for most image reading tasks.\nParameters\nfileNames\na vector of file names\noutputPixelType\nsee ImageReaderBase::SetOutputPixelType\nimageIO\nsee ImageReaderBase::SetImageIO\nNote\nWhen reading a series of images that have meta-data associated with them (e.g. a DICOM series) the resulting image will have an empty meta-data dictionary. If you need the meta-data dictionaries associated with each slice then you should use the ImageSeriesReader class.\nIf the pixel type for the returned image is not specified it is deduced from the first image in the series. This approach is computationally efficient and assumes that all images in a series have the same pixel type. If this is not the case, explicitly specify the widest pixel type in the series as the outputPixelType.\nSee also\nitk::simple::ImageFileReader for reading a single file.\nitk::simple::ImageSeriesReader for reading a series and meta-data dictionaries.",
        "inputs": [
            {
                "name": "fileNames",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "imageIO",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ReadParameterFile:_filename": {
        "name": "ReadParameterFile",
        "function_name": "ReadParameterFile",
        "description": "Examples\nElastix/elx.cxx, and Elastix/tfx.cxx.",
        "inputs": [
            {
                "name": "filename",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ReadTransform:_filename": {
        "name": "ReadTransform",
        "function_name": "ReadTransform",
        "description": "Examples\nDemonsRegistration2/DemonsRegistration2.cxx, and SimpleIO/SimpleIO.cxx.",
        "inputs": [
            {
                "name": "filename",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "RealAndImaginaryToComplex:_image1_image2": {
        "name": "RealAndImaginaryToComplex",
        "function_name": "RealAndImaginaryToComplex",
        "description": "ComposeImageFilter combine several scalar images into a multicomponent image.\n\\ This function directly calls the execute method of RealAndImaginaryToComplexImageFilter in order to support a procedural API\nSee also\nitk::simple::RealAndImaginaryToComplexImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RealToHalfHermitianForwardFFT:_image1": {
        "name": "RealToHalfHermitianForwardFFT",
        "function_name": "RealToHalfHermitianForwardFFT",
        "description": "Base class for specialized real-to-complex forward Fast Fourier Transform .\n\\ This function directly calls the execute method of RealToHalfHermitianForwardFFTImageFilter in order to support a procedural API\nSee also\nitk::simple::RealToHalfHermitianForwardFFTImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ReconstructionByDilation:_markerImage_maskImage_fullyConnected_useInternalCopy": {
        "name": "ReconstructionByDilation",
        "function_name": "ReconstructionByDilation",
        "description": "grayscale reconstruction by dilation of an image\n\\ This function directly calls the execute method of ReconstructionByDilationImageFilter in order to support a procedural API\nSee also\nitk::simple::ReconstructionByDilationImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "markerImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "useInternalCopy",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ReconstructionByErosion:_markerImage_maskImage_fullyConnected_useInternalCopy": {
        "name": "ReconstructionByErosion",
        "function_name": "ReconstructionByErosion",
        "description": "grayscale reconstruction by erosion of an image\n\\ This function directly calls the execute method of ReconstructionByErosionImageFilter in order to support a procedural API\nSee also\nitk::simple::ReconstructionByErosionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "markerImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "useInternalCopy",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RecursiveGaussian:_image1_sigma_normalizeAcrossScale_order_direction": {
        "name": "RecursiveGaussian",
        "function_name": "RecursiveGaussian",
        "description": "Base class for computing IIR convolution with an approximation of a Gaussian kernel.\n\\ This function directly calls the execute method of RecursiveGaussianImageFilter in order to support a procedural API\nSee also\nitk::simple::RecursiveGaussianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sigma",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "normalizeAcrossScale",
                "default": false,
                "type": "bool"
            },
            {
                "name": "order",
                "default": "itk::simple::RecursiveGaussianImageFilter::ZeroOrder",
                "type": "Path"
            },
            {
                "name": "direction",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RegionalMaxima:_image1_backgroundValue_foregroundValue_fullyConnected_flatIsMaxima": {
        "name": "RegionalMaxima",
        "function_name": "RegionalMaxima",
        "description": "Produce a binary image where foreground is the regional maxima of the input image.\n\\ This function directly calls the execute method of RegionalMaximaImageFilter in order to support a procedural API\nSee also\nitk::simple::RegionalMaximaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "flatIsMaxima",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RegionalMinima:_image1_backgroundValue_foregroundValue_fullyConnected_flatIsMinima": {
        "name": "RegionalMinima",
        "function_name": "RegionalMinima",
        "description": "Produce a binary image where foreground is the regional minima of the input image.\n\\ This function directly calls the execute method of RegionalMinimaImageFilter in order to support a procedural API\nSee also\nitk::simple::RegionalMinimaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            },
            {
                "name": "flatIsMinima",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RegionOfInterest:_image1_size_index": {
        "name": "RegionOfInterest",
        "function_name": "RegionOfInterest",
        "description": "Extract a region of interest from the input image.\n\\ This function directly calls the execute method of RegionOfInterestImageFilter in order to support a procedural API\nSee also\nitk::simple::RegionOfInterestImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "index",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RelabelComponent:_image1_minimumObjectSize_sortByObjectSize": {
        "name": "RelabelComponent",
        "function_name": "RelabelComponent",
        "description": "Relabel the components in an image such that consecutive labels are used.\n\\ This function directly calls the execute method of RelabelComponentImageFilter in order to support a procedural API\nSee also\nitk::simple::RelabelComponentImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "minimumObjectSize",
                "default": 0,
                "type": "int"
            },
            {
                "name": "sortByObjectSize",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RelabelLabelMap:_image1_reverseOrdering": {
        "name": "RelabelLabelMap",
        "function_name": "RelabelLabelMap",
        "description": "This filter relabels the LabelObjects; the new labels are arranged consecutively with consideration for the background value.\n\\ This function directly calls the execute method of RelabelLabelMapFilter in order to support a procedural API\nSee also\nitk::simple::RelabelLabelMapFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "reverseOrdering",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RenyiEntropyThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "RenyiEntropyThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "RenyiEntropyThreshold",
        "description": "Threshold an image using the RenyiEntropy Threshold.\n\\ This function directly calls the execute method of RenyiEntropyThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::RenyiEntropyThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RenyiEntropyThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "RenyiEntropyThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "RenyiEntropyThreshold",
        "description": "Threshold an image using the RenyiEntropy Threshold.\n\\ This function directly calls the execute method of RenyiEntropyThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::RenyiEntropyThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Resample:_image1_referenceImage_transform_interpolator_defaultPixelValue_outputPixelType_useNearestNeighborExtrapolator": {
        "name": "Resample:_image1_referenceImage_transform_interpolator_defaultPixelValue_outputPixelType_useNearestNeighborExtrapolator",
        "function_name": "Resample",
        "description": "itk::simple::ResampleImageFilter Procedural Interface\nThese functions call the execute method of ResampleImageFilter in order to support a procedural API.\nThe difference between the three functions is in the way the output image's domain parameters are specified (origin, spacing, direction). The first function uses the parameters from the input image, the second uses the parameters of a reference image, and the third uses explicitly specified parameters.\nSee also\nitk::simple::ResampleImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "referenceImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transform",
                "default": "itk::simple::Transform()",
                "type": "Path"
            },
            {
                "name": "interpolator",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "useNearestNeighborExtrapolator",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Resample:_image1_size_transform_interpolator_outputOrigin_outputSpacing_outputDirection_defaultPixelValue_outputPixelType_useNearestNeighborExtrapolator": {
        "name": "Resample:_image1_size_transform_interpolator_outputOrigin_outputSpacing_outputDirection_defaultPixelValue_outputPixelType_useNearestNeighborExtrapolator",
        "function_name": "Resample",
        "description": "itk::simple::ResampleImageFilter Procedural Interface\nThese functions call the execute method of ResampleImageFilter in order to support a procedural API.\nThe difference between the three functions is in the way the output image's domain parameters are specified (origin, spacing, direction). The first function uses the parameters from the input image, the second uses the parameters of a reference image, and the third uses explicitly specified parameters.\nSee also\nitk::simple::ResampleImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "transform",
                "default": "itk::simple::Transform()",
                "type": "Path"
            },
            {
                "name": "interpolator",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputOrigin",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputSpacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirection",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "useNearestNeighborExtrapolator",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Resample:_image1_transform_interpolator_defaultPixelValue_outputPixelType_useNearestNeighborExtrapolator": {
        "name": "Resample:_image1_transform_interpolator_defaultPixelValue_outputPixelType_useNearestNeighborExtrapolator",
        "function_name": "Resample",
        "description": "itk::simple::ResampleImageFilter Procedural Interface\nThese functions call the execute method of ResampleImageFilter in order to support a procedural API.\nThe difference between the three functions is in the way the output image's domain parameters are specified (origin, spacing, direction). The first function uses the parameters from the input image, the second uses the parameters of a reference image, and the third uses explicitly specified parameters.\nSee also\nitk::simple::ResampleImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transform",
                "default": "itk::simple::Transform()",
                "type": "Path"
            },
            {
                "name": "interpolator",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "useNearestNeighborExtrapolator",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RescaleIntensity:_image1_outputMinimum_outputMaximum": {
        "name": "RescaleIntensity",
        "function_name": "RescaleIntensity",
        "description": "Applies a linear transformation to the intensity levels of the input Image .\n\\ This function directly calls the execute method of RescaleIntensityImageFilter in order to support a procedural API\nSee also\nitk::simple::RescaleIntensityImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "outputMinimum",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "outputMaximum",
                "default": 255.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "RichardsonLucyDeconvolution:_image1_image2_numberOfIterations_normalize_boundaryCondition_outputRegionMode": {
        "name": "RichardsonLucyDeconvolution",
        "function_name": "RichardsonLucyDeconvolution",
        "description": "Deconvolve an image using the Richardson-Lucy deconvolution algorithm.\n\\ This function directly calls the execute method of RichardsonLucyDeconvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::RichardsonLucyDeconvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "numberOfIterations",
                "default": 1,
                "type": "int"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::RichardsonLucyDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::RichardsonLucyDeconvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Round:_image1": {
        "name": "Round",
        "function_name": "Round",
        "description": "Rounds the value of each pixel.\n\\ This function directly calls the execute method of RoundImageFilter in order to support a procedural API\nSee also\nitk::simple::RoundImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SaltAndPepperNoise:_image1_probability_seed": {
        "name": "SaltAndPepperNoise",
        "function_name": "SaltAndPepperNoise",
        "description": "Alter an image with fixed value impulse noise, often called salt and pepper noise.\n\\ This function directly calls the execute method of SaltAndPepperNoiseImageFilter in order to support a procedural API\nSee also\nitk::simple::SaltAndPepperNoiseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "probability",
                "default": 0.01,
                "type": "float"
            },
            {
                "name": "seed",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ScalarChanAndVeseDenseLevelSet:_initialImage_featureImage_maximumRMSError_numberOfIterations_lambda1_lambda2_epsilon_curvatureWeight_areaWeight_reinitializationSmoothingWeight_volume_volumeMatchingWeight_heavisideStepFunction_useImageSpacing": {
        "name": "ScalarChanAndVeseDenseLevelSet",
        "function_name": "ScalarChanAndVeseDenseLevelSet",
        "description": "Dense implementation of the Chan and Vese multiphase level set image filter.\n\\ This function directly calls the execute method of ScalarChanAndVeseDenseLevelSetImageFilter in order to support a procedural API\nSee also\nitk::simple::ScalarChanAndVeseDenseLevelSetImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "initialImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximumRMSError",
                "default": 0.02,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            },
            {
                "name": "lambda1",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "lambda2",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "epsilon",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "curvatureWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "areaWeight",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "reinitializationSmoothingWeight",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "volume",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "volumeMatchingWeight",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "heavisideStepFunction",
                "default": "itk::simple::ScalarChanAndVeseDenseLevelSetImageFilter::AtanRegularizedHeaviside",
                "type": "Path"
            },
            {
                "name": "useImageSpacing",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ScalarConnectedComponent:_image_maskImage_distanceThreshold_fullyConnected": {
        "name": "ScalarConnectedComponent:_image_maskImage_distanceThreshold_fullyConnected",
        "function_name": "ScalarConnectedComponent",
        "description": "A connected components filter that labels the objects in an arbitrary image. Two pixels are similar if they are within threshold of each other. Uses ConnectedComponentFunctorImageFilter .\n\\ This function directly calls the execute method of ScalarConnectedComponentImageFilter in order to support a procedural API\nSee also\nitk::simple::ScalarConnectedComponentImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "distanceThreshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ScalarConnectedComponent:_image_distanceThreshold_fullyConnected": {
        "name": "ScalarConnectedComponent:_image_distanceThreshold_fullyConnected",
        "function_name": "ScalarConnectedComponent",
        "description": "A connected components filter that labels the objects in an arbitrary image. Two pixels are similar if they are within threshold of each other. Uses ConnectedComponentFunctorImageFilter .\n\\ This function directly calls the execute method of ScalarConnectedComponentImageFilter in order to support a procedural API\nSee also\nitk::simple::ScalarConnectedComponentImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "distanceThreshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ScalarImageKmeans:_image1_classWithInitialMean_useNonContiguousLabels": {
        "name": "ScalarImageKmeans",
        "function_name": "ScalarImageKmeans",
        "description": "Classifies the intensity values of a scalar image using the K-Means algorithm.\n\\ This function directly calls the execute method of ScalarImageKmeansImageFilter in order to support a procedural API\nSee also\nitk::simple::ScalarImageKmeansImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "classWithInitialMean",
                "default": "",
                "type": "str"
            },
            {
                "name": "useNonContiguousLabels",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ScalarToRGBColormap:_image1_colormap_useInputImageExtremaForScaling": {
        "name": "ScalarToRGBColormap",
        "function_name": "ScalarToRGBColormap",
        "description": "Implements pixel-wise intensity->rgb mapping operation on one image.\n\\ This function directly calls the execute method of ScalarToRGBColormapImageFilter in order to support a procedural API\nSee also\nitk::simple::ScalarToRGBColormapImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "colormap",
                "default": "itk::simple::ScalarToRGBColormapImageFilter::Grey",
                "type": "Path"
            },
            {
                "name": "useInputImageExtremaForScaling",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ShanbhagThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "ShanbhagThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "ShanbhagThreshold",
        "description": "Threshold an image using the Shanbhag Threshold.\n\\ This function directly calls the execute method of ShanbhagThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::ShanbhagThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ShanbhagThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "ShanbhagThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "ShanbhagThreshold",
        "description": "Threshold an image using the Shanbhag Threshold.\n\\ This function directly calls the execute method of ShanbhagThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::ShanbhagThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ShapeDetectionLevelSet:_initialImage_featureImage_maximumRMSError_propagationScaling_curvatureScaling_numberOfIterations_reverseExpansionDirection": {
        "name": "ShapeDetectionLevelSet",
        "function_name": "ShapeDetectionLevelSet",
        "description": "Segments structures in images based on a user supplied edge potential map.\n\\ This function directly calls the execute method of ShapeDetectionLevelSetImageFilter in order to support a procedural API\nSee also\nitk::simple::ShapeDetectionLevelSetImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "initialImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maximumRMSError",
                "default": 0.02,
                "type": "float"
            },
            {
                "name": "propagationScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "curvatureScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            },
            {
                "name": "reverseExpansionDirection",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ShiftScale:_image1_shift_scale_outputPixelType": {
        "name": "ShiftScale",
        "function_name": "ShiftScale",
        "description": "Shift and scale the pixels in an image.\n\\ This function directly calls the execute method of ShiftScaleImageFilter in order to support a procedural API\nSee also\nitk::simple::ShiftScaleImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "shift",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "scale",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ShotNoise:_image1_scale_seed": {
        "name": "ShotNoise",
        "function_name": "ShotNoise",
        "description": "Alter an image with shot noise.\n\\ This function directly calls the execute method of ShotNoiseImageFilter in order to support a procedural API\nSee also\nitk::simple::ShotNoiseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "scale",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "seed",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Show:_image_title_debugOn": {
        "name": "Show",
        "function_name": "Show",
        "description": "Display an image in an external viewer (Fiji by default)\nThis function directly calls the execute method of ImageViewer in order to support a procedural API\nExamples\nBufferImportExport.cxx, DicomSeriesReader/DicomSeriesReader.cxx, HelloWorld/HelloWorld.cxx, and N4BiasFieldCorrection/N4BiasFieldCorrection.cxx.",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "title",
                "default": "",
                "type": "str"
            },
            {
                "name": "debugOn",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Shrink:_image1_shrinkFactors": {
        "name": "Shrink",
        "function_name": "Shrink",
        "description": "Reduce the size of an image by an integer factor in each dimension.\n\\ This function directly calls the execute method of ShrinkImageFilter in order to support a procedural API\nSee also\nitk::simple::ShrinkImageFilter for the object oriented interface\nExamples\nN4BiasFieldCorrection/N4BiasFieldCorrection.cxx.",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "shrinkFactors",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Sigmoid:_image1_alpha_beta_outputMaximum_outputMinimum": {
        "name": "Sigmoid",
        "function_name": "Sigmoid",
        "description": "Computes the sigmoid function pixel-wise.\n\\ This function directly calls the execute method of SigmoidImageFilter in order to support a procedural API\nSee also\nitk::simple::SigmoidImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "alpha",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "beta",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "outputMaximum",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "outputMinimum",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SignedDanielssonDistanceMap:_image1_insideIsPositive_squaredDistance_useImageSpacing": {
        "name": "SignedDanielssonDistanceMap",
        "function_name": "SignedDanielssonDistanceMap",
        "description": "This filter computes the signed distance map of the input image as an approximation with pixel accuracy to the Euclidean distance.\n\\ This function directly calls the execute method of SignedDanielssonDistanceMapImageFilter in order to support a procedural API\nSee also\nitk::simple::SignedDanielssonDistanceMapImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideIsPositive",
                "default": false,
                "type": "bool"
            },
            {
                "name": "squaredDistance",
                "default": false,
                "type": "bool"
            },
            {
                "name": "useImageSpacing",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SignedMaurerDistanceMap:_image1_insideIsPositive_squaredDistance_useImageSpacing_backgroundValue": {
        "name": "SignedMaurerDistanceMap",
        "function_name": "SignedMaurerDistanceMap",
        "description": "This filter calculates the Euclidean distance transform of a binary image in linear time for arbitrary dimensions.\n\\ This function directly calls the execute method of SignedMaurerDistanceMapImageFilter in order to support a procedural API\nSee also\nitk::simple::SignedMaurerDistanceMapImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideIsPositive",
                "default": false,
                "type": "bool"
            },
            {
                "name": "squaredDistance",
                "default": true,
                "type": "bool"
            },
            {
                "name": "useImageSpacing",
                "default": false,
                "type": "bool"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SimpleContourExtractor:_image1_inputForegroundValue_inputBackgroundValue_radius_outputForegroundValue_outputBackgroundValue": {
        "name": "SimpleContourExtractor",
        "function_name": "SimpleContourExtractor",
        "description": "Computes an image of contours which will be the contour of the first image.\n\\ This function directly calls the execute method of SimpleContourExtractorImageFilter in order to support a procedural API\nSee also\nitk::simple::SimpleContourExtractorImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "inputForegroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "inputBackgroundValue",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputForegroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "outputBackgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Sin:_image1": {
        "name": "Sin",
        "function_name": "Sin",
        "description": "Computes the sine of each pixel.\n\\ This function directly calls the execute method of SinImageFilter in order to support a procedural API\nSee also\nitk::simple::SinImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "sitkITKDirectionToSTL:_d": {
        "name": "sitkITKDirectionToSTL",
        "function_name": "sitkITKDirectionToSTL",
        "description": "Definition at line 212 of file sitkTemplateFunctions.h.",
        "inputs": [
            {
                "name": "d",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkITKImageRegionToSTL:_in": {
        "name": "sitkITKImageRegionToSTL",
        "function_name": "sitkITKImageRegionToSTL",
        "description": "Convert an ITK ImageRegion to and std::vector with the first part being the start index followed by the size.\nDefinition at line 171 of file sitkTemplateFunctions.h.\nReferences itk::ImageRegion< VImageDimension >::GetIndex(), and itk::ImageRegion< VImageDimension >::GetSize().",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkITKVectorToSTL:_in": {
        "name": "sitkITKVectorToSTL",
        "function_name": "sitkITKVectorToSTL",
        "description": "Convert an ITK fixed width vector to a std::vector.\nDefinition at line 117 of file sitkTemplateFunctions.h.",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkITKVersorToSTL:_in": {
        "name": "sitkITKVersorToSTL",
        "function_name": "sitkITKVersorToSTL",
        "description": "Definition at line 236 of file sitkTemplateFunctions.h.\nReferences itk::Versor< T >::GetW(), itk::Versor< T >::GetX(), itk::Versor< T >::GetY(), and itk::Versor< T >::GetZ().",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkSTLToITKDirection:_direction": {
        "name": "sitkSTLToITKDirection",
        "function_name": "sitkSTLToITKDirection",
        "description": "Definition at line 189 of file sitkTemplateFunctions.h.\nReferences sitkExceptionMacro.",
        "inputs": [
            {
                "name": "direction",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkSTLVectorToITK:_in": {
        "name": "sitkSTLVectorToITK",
        "function_name": "sitkSTLVectorToITK",
        "description": "Copy the elements of an std::vector into an ITK fixed width vector.\nIf there are more elements in parameter \"in\" than the templated ITK vector type, they are truncated. If less, then an exception is generated.\nDefinition at line 96 of file sitkTemplateFunctions.h.\nReferences sitkExceptionMacro.",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkSTLVectorToITKPointVector:_in": {
        "name": "sitkSTLVectorToITKPointVector",
        "function_name": "sitkSTLVectorToITKPointVector",
        "description": "Definition at line 72 of file sitkTemplateFunctions.h.\nReferences Dimension.",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkSTLVectorToITKVersor:_in": {
        "name": "sitkSTLVectorToITKVersor",
        "function_name": "sitkSTLVectorToITKVersor",
        "description": "Definition at line 220 of file sitkTemplateFunctions.h.\nReferences sitkExceptionMacro.",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "sitkVectorOfITKVectorToSTL:_in": {
        "name": "sitkVectorOfITKVectorToSTL",
        "function_name": "sitkVectorOfITKVectorToSTL",
        "description": "Convert an ITK style array of ITK fixed width vector to std::vector.\nAn example input type is itk::FixedArray<itk::Point<3>, 3>\nDefinition at line 133 of file sitkTemplateFunctions.h.",
        "inputs": [
            {
                "name": "in",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "SLIC:_image1_superGridSize_spatialProximityWeight_maximumNumberOfIterations_enforceConnectivity_initializationPerturbation": {
        "name": "SLIC",
        "function_name": "SLIC",
        "description": "Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.\n\\ This function directly calls the execute method of SLICImageFilter in order to support a procedural API\nSee also\nitk::simple::SLICImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "superGridSize",
                "default": "",
                "type": "str"
            },
            {
                "name": "spatialProximityWeight",
                "default": 10.0,
                "type": "float"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": 5,
                "type": "int"
            },
            {
                "name": "enforceConnectivity",
                "default": true,
                "type": "bool"
            },
            {
                "name": "initializationPerturbation",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Slice:_image1_start_stop_step": {
        "name": "Slice",
        "function_name": "Slice",
        "description": "Slices an image based on a starting index and a stopping index, and a step size.\n\\ This function directly calls the execute method of SliceImageFilter in order to support a procedural API\nSee also\nitk::simple::SliceImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "start",
                "default": "",
                "type": "str"
            },
            {
                "name": "stop",
                "default": "",
                "type": "str"
            },
            {
                "name": "step",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SmoothingRecursiveGaussian:_image1_sigma_normalizeAcrossScale": {
        "name": "SmoothingRecursiveGaussian",
        "function_name": "SmoothingRecursiveGaussian",
        "description": "Computes the smoothing of an image by convolution with the Gaussian kernels implemented as IIR filters.\n\\ This function directly calls the execute method of SmoothingRecursiveGaussianImageFilter in order to support a procedural API\nSee also\nitk::simple::SmoothingRecursiveGaussianImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sigma",
                "default": "",
                "type": "str"
            },
            {
                "name": "normalizeAcrossScale",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SobelEdgeDetection:_image1": {
        "name": "SobelEdgeDetection",
        "function_name": "SobelEdgeDetection",
        "description": "A 2D or 3D edge detection using the Sobel operator.\n\\ This function directly calls the execute method of SobelEdgeDetectionImageFilter in order to support a procedural API\nSee also\nitk::simple::SobelEdgeDetectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SpeckleNoise:_image1_standardDeviation_seed": {
        "name": "SpeckleNoise",
        "function_name": "SpeckleNoise",
        "description": "Alter an image with speckle (multiplicative) noise.\n\\ This function directly calls the execute method of SpeckleNoiseImageFilter in order to support a procedural API\nSee also\nitk::simple::SpeckleNoiseImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "standardDeviation",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "seed",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Sqrt:_image1": {
        "name": "Sqrt",
        "function_name": "Sqrt",
        "description": "Computes the square root of each pixel.\n\\ This function directly calls the execute method of SqrtImageFilter in order to support a procedural API\nSee also\nitk::simple::SqrtImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Square:_image1": {
        "name": "Square",
        "function_name": "Square",
        "description": "Computes the square of the intensity values pixel-wise.\n\\ This function directly calls the execute method of SquareImageFilter in order to support a procedural API\nSee also\nitk::simple::SquareImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SquaredDifference:_image1_image2": {
        "name": "SquaredDifference:_image1_image2",
        "function_name": "SquaredDifference",
        "description": "Implements pixel-wise the computation of squared difference.\n\\ This function directly calls the execute method of SquaredDifferenceImageFilter in order to support a procedural API\nSee also\nitk::simple::SquaredDifferenceImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SquaredDifference:_image1_constant": {
        "name": "SquaredDifference:_image1_constant",
        "function_name": "SquaredDifference",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SquaredDifference:_constant_image2": {
        "name": "SquaredDifference:_constant_image2",
        "function_name": "SquaredDifference",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "StandardDeviationProjection:_image1_projectionDimension": {
        "name": "StandardDeviationProjection",
        "function_name": "StandardDeviationProjection",
        "description": "Mean projection.\n\\ This function directly calls the execute method of StandardDeviationProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::StandardDeviationProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "STAPLE:_image1_image2_image3_image4_image5_confidenceWeight_foregroundValue_maximumIterations": {
        "name": "STAPLE:_image1_image2_image3_image4_image5_confidenceWeight_foregroundValue_maximumIterations",
        "function_name": "STAPLE",
        "description": "The STAPLE filter implements the Simultaneous Truth and Performance Level Estimation algorithm for generating ground truth volumes from a set of binary expert segmentations.\nThis function directly calls the execute method of STAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::STAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            },
            {
                "name": "confidenceWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "maximumIterations",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "STAPLE:_image1_image2_image3_image4_confidenceWeight_foregroundValue_maximumIterations": {
        "name": "STAPLE:_image1_image2_image3_image4_confidenceWeight_foregroundValue_maximumIterations",
        "function_name": "STAPLE",
        "description": "The STAPLE filter implements the Simultaneous Truth and Performance Level Estimation algorithm for generating ground truth volumes from a set of binary expert segmentations.\nThis function directly calls the execute method of STAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::STAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "confidenceWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "maximumIterations",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "STAPLE:_image1_image2_image3_confidenceWeight_foregroundValue_maximumIterations": {
        "name": "STAPLE:_image1_image2_image3_confidenceWeight_foregroundValue_maximumIterations",
        "function_name": "STAPLE",
        "description": "The STAPLE filter implements the Simultaneous Truth and Performance Level Estimation algorithm for generating ground truth volumes from a set of binary expert segmentations.\nThis function directly calls the execute method of STAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::STAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "confidenceWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "maximumIterations",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "STAPLE:_image1_image2_confidenceWeight_foregroundValue_maximumIterations": {
        "name": "STAPLE:_image1_image2_confidenceWeight_foregroundValue_maximumIterations",
        "function_name": "STAPLE",
        "description": "The STAPLE filter implements the Simultaneous Truth and Performance Level Estimation algorithm for generating ground truth volumes from a set of binary expert segmentations.\nThis function directly calls the execute method of STAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::STAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "confidenceWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "maximumIterations",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "STAPLE:_image1_confidenceWeight_foregroundValue_maximumIterations": {
        "name": "STAPLE:_image1_confidenceWeight_foregroundValue_maximumIterations",
        "function_name": "STAPLE",
        "description": "The STAPLE filter implements the Simultaneous Truth and Performance Level Estimation algorithm for generating ground truth volumes from a set of binary expert segmentations.\nThis function directly calls the execute method of STAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::STAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "confidenceWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "maximumIterations",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "STAPLE:_images_confidenceWeight_foregroundValue_maximumIterations": {
        "name": "STAPLE:_images_confidenceWeight_foregroundValue_maximumIterations",
        "function_name": "STAPLE",
        "description": "The STAPLE filter implements the Simultaneous Truth and Performance Level Estimation algorithm for generating ground truth volumes from a set of binary expert segmentations.\nThis function directly calls the execute method of STAPLEImageFilter in order to support a procedural API\nSee also\nitk::simple::STAPLEImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            },
            {
                "name": "confidenceWeight",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "maximumIterations",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "StochasticFractalDimension:_image_maskImage_neighborhoodRadius": {
        "name": "StochasticFractalDimension:_image_maskImage_neighborhoodRadius",
        "function_name": "StochasticFractalDimension",
        "description": "This filter computes the stochastic fractal dimension of the input image.\n\\ This function directly calls the execute method of StochasticFractalDimensionImageFilter in order to support a procedural API\nSee also\nitk::simple::StochasticFractalDimensionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "neighborhoodRadius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "StochasticFractalDimension:_image_neighborhoodRadius": {
        "name": "StochasticFractalDimension:_image_neighborhoodRadius",
        "function_name": "StochasticFractalDimension",
        "description": "This filter computes the stochastic fractal dimension of the input image.\n\\ This function directly calls the execute method of StochasticFractalDimensionImageFilter in order to support a procedural API\nSee also\nitk::simple::StochasticFractalDimensionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "neighborhoodRadius",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Subtract:_image1_image2": {
        "name": "Subtract:_image1_image2",
        "function_name": "Subtract",
        "description": "Pixel-wise subtraction of two images.\n\\ This function directly calls the execute method of SubtractImageFilter in order to support a procedural API\nSee also\nitk::simple::SubtractImageFilter for the object oriented interface\nExamples\nCppInPlace/CppInPlace.cxx.\nReferenced by operator-(), and operator-=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Subtract:_image1_constant": {
        "name": "Subtract:_image1_constant",
        "function_name": "Subtract",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Subtract:_constant_image2": {
        "name": "Subtract:_constant_image2",
        "function_name": "Subtract",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "float"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "SumProjection:_image1_projectionDimension": {
        "name": "SumProjection",
        "function_name": "SumProjection",
        "description": "Sum projection.\n\\ This function directly calls the execute method of SumProjectionImageFilter in order to support a procedural API\nSee also\nitk::simple::SumProjectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "projectionDimension",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tan:_image1": {
        "name": "Tan",
        "function_name": "Tan",
        "description": "Computes the tangent of each input pixel.\n\\ This function directly calls the execute method of TanImageFilter in order to support a procedural API\nSee also\nitk::simple::TanImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TernaryAdd:_image1_image2_image3": {
        "name": "TernaryAdd",
        "function_name": "TernaryAdd",
        "description": "Pixel-wise addition of three images.\n\\ This function directly calls the execute method of TernaryAddImageFilter in order to support a procedural API\nSee also\nitk::simple::TernaryAddImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TernaryMagnitude:_image1_image2_image3": {
        "name": "TernaryMagnitude",
        "function_name": "TernaryMagnitude",
        "description": "Compute the pixel-wise magnitude of three images.\n\\ This function directly calls the execute method of TernaryMagnitudeImageFilter in order to support a procedural API\nSee also\nitk::simple::TernaryMagnitudeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TernaryMagnitudeSquared:_image1_image2_image3": {
        "name": "TernaryMagnitudeSquared",
        "function_name": "TernaryMagnitudeSquared",
        "description": "Compute the pixel-wise squared magnitude of three images.\n\\ This function directly calls the execute method of TernaryMagnitudeSquaredImageFilter in order to support a procedural API\nSee also\nitk::simple::TernaryMagnitudeSquaredImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Threshold:_image1_lower_upper_outsideValue": {
        "name": "Threshold",
        "function_name": "Threshold",
        "description": "Set image values to a user-specified value if they are below, above, or between simple threshold values.\n\\ This function directly calls the execute method of ThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::ThresholdImageFilter for the object oriented interface\nReferenced by itk::simple::IsolatedWatershedImageFilter::SetThreshold(), itk::simple::UnsharpMaskImageFilter::SetThreshold(), itk::simple::BinaryMinMaxCurvatureFlowImageFilter::SetThreshold(), and itk::simple::CannySegmentationLevelSetImageFilter::SetThreshold().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lower",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upper",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "outsideValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ThresholdMaximumConnectedComponents:_image1_minimumObjectSizeInPixels_upperBoundary_insideValue_outsideValue": {
        "name": "ThresholdMaximumConnectedComponents",
        "function_name": "ThresholdMaximumConnectedComponents",
        "description": "Finds the threshold value of an image based on maximizing the number of objects in the image that are larger than a given minimal size.\n\\ This function directly calls the execute method of ThresholdMaximumConnectedComponentsImageFilter in order to support a procedural API\nSee also\nitk::simple::ThresholdMaximumConnectedComponentsImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "minimumObjectSizeInPixels",
                "default": 0,
                "type": "int"
            },
            {
                "name": "upperBoundary",
                "default": "",
                "type": "float"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ThresholdSegmentationLevelSet:_initialImage_featureImage_lowerThreshold_upperThreshold_maximumRMSError_propagationScaling_curvatureScaling_numberOfIterations_reverseExpansionDirection": {
        "name": "ThresholdSegmentationLevelSet",
        "function_name": "ThresholdSegmentationLevelSet",
        "description": "Segments structures in images based on intensity values.\n\\ This function directly calls the execute method of ThresholdSegmentationLevelSetImageFilter in order to support a procedural API\nSee also\nitk::simple::ThresholdSegmentationLevelSetImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "initialImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "featureImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "lowerThreshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "upperThreshold",
                "default": 255.0,
                "type": "float"
            },
            {
                "name": "maximumRMSError",
                "default": 0.02,
                "type": "float"
            },
            {
                "name": "propagationScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "curvatureScaling",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "numberOfIterations",
                "default": 1000,
                "type": "int"
            },
            {
                "name": "reverseExpansionDirection",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TikhonovDeconvolution:_image1_image2_regularizationConstant_normalize_boundaryCondition_outputRegionMode": {
        "name": "TikhonovDeconvolution",
        "function_name": "TikhonovDeconvolution",
        "description": "An inverse deconvolution filter regularized in the Tikhonov sense.\n\\ This function directly calls the execute method of TikhonovDeconvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::TikhonovDeconvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "regularizationConstant",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::TikhonovDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::TikhonovDeconvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tile:_image1_image2_image3_image4_image5_layout_defaultPixelValue": {
        "name": "Tile:_image1_image2_image3_image4_image5_layout_defaultPixelValue",
        "function_name": "Tile",
        "description": "Tile multiple input images into a single output image.\nThis function directly calls the execute method of TileImageFilter in order to support a procedural API\nSee also\nitk::simple::TileImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image5",
                "default": "",
                "type": "Path"
            },
            {
                "name": "layout",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tile:_image1_image2_image3_image4_layout_defaultPixelValue": {
        "name": "Tile:_image1_image2_image3_image4_layout_defaultPixelValue",
        "function_name": "Tile",
        "description": "Tile multiple input images into a single output image.\nThis function directly calls the execute method of TileImageFilter in order to support a procedural API\nSee also\nitk::simple::TileImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image4",
                "default": "",
                "type": "Path"
            },
            {
                "name": "layout",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tile:_image1_image2_image3_layout_defaultPixelValue": {
        "name": "Tile:_image1_image2_image3_layout_defaultPixelValue",
        "function_name": "Tile",
        "description": "Tile multiple input images into a single output image.\nThis function directly calls the execute method of TileImageFilter in order to support a procedural API\nSee also\nitk::simple::TileImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image3",
                "default": "",
                "type": "Path"
            },
            {
                "name": "layout",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tile:_image1_image2_layout_defaultPixelValue": {
        "name": "Tile:_image1_image2_layout_defaultPixelValue",
        "function_name": "Tile",
        "description": "Tile multiple input images into a single output image.\nThis function directly calls the execute method of TileImageFilter in order to support a procedural API\nSee also\nitk::simple::TileImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "layout",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tile:_image1_layout_defaultPixelValue": {
        "name": "Tile:_image1_layout_defaultPixelValue",
        "function_name": "Tile",
        "description": "Tile multiple input images into a single output image.\nThis function directly calls the execute method of TileImageFilter in order to support a procedural API\nSee also\nitk::simple::TileImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "layout",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Tile:_images_layout_defaultPixelValue": {
        "name": "Tile:_images_layout_defaultPixelValue",
        "function_name": "Tile",
        "description": "Tile multiple input images into a single output image.\nThis function directly calls the execute method of TileImageFilter in order to support a procedural API\nSee also\nitk::simple::TileImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "images",
                "default": "",
                "type": "Path"
            },
            {
                "name": "layout",
                "default": "",
                "type": "str"
            },
            {
                "name": "defaultPixelValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Toboggan:_image1": {
        "name": "Toboggan",
        "function_name": "Toboggan",
        "description": "toboggan image segmentation The Toboggan segmentation takes a gradient magnitude image as input and produces an (over-)segmentation of the image based on connecting each pixel to a local minimum of gradient. It is roughly equivalent to a watershed segmentation of the lowest level.\n\\ This function directly calls the execute method of TobogganImageFilter in order to support a procedural API\nSee also\nitk::simple::TobogganImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TransformGeometry:_image_transform": {
        "name": "TransformGeometry",
        "function_name": "TransformGeometry",
        "description": "Modify an image's geometric meta-data, changing its \"physical\" extent.\n\\ This function directly calls the execute method of TransformGeometryImageFilter in order to support a procedural API\nSee also\nitk::simple::TransformGeometryImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "transform",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Transformix:_movingImage_parameterMap_logToConsole_outputDirectory": {
        "name": "Transformix:_movingImage_parameterMap_logToConsole_outputDirectory",
        "function_name": "Transformix",
        "description": "",
        "inputs": [
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "parameterMap",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Transformix:_movingImage_parameterMapVector_logToConsole_outputDirectory": {
        "name": "Transformix:_movingImage_parameterMapVector_logToConsole_outputDirectory",
        "function_name": "Transformix",
        "description": "",
        "inputs": [
            {
                "name": "movingImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "parameterMapVector",
                "default": "",
                "type": "str"
            },
            {
                "name": "logToConsole",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirectory",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "TransformToDisplacementField:_transform_outputPixelType_size_outputOrigin_outputSpacing_outputDirection": {
        "name": "TransformToDisplacementField",
        "function_name": "TransformToDisplacementField",
        "description": "Generate a displacement field from a coordinate transform.\nThis function directly calls the execute method of TransformToDisplacementFieldFilter in order to support a procedural API\nSee also\nitk::simple::TransformToDisplacementFieldFilter for the object oriented interface",
        "inputs": [
            {
                "name": "transform",
                "default": "",
                "type": "Path"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "size",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputOrigin",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputSpacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirection",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TriangleThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "TriangleThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "TriangleThreshold",
        "description": "Threshold an image using the Triangle Threshold.\n\\ This function directly calls the execute method of TriangleThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::TriangleThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TriangleThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "TriangleThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "TriangleThreshold",
        "description": "Threshold an image using the Triangle Threshold.\n\\ This function directly calls the execute method of TriangleThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::TriangleThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "TypeListHasPixelIDValue:_match": {
        "name": "TypeListHasPixelIDValue",
        "function_name": "TypeListHasPixelIDValue",
        "description": "Check if the runtime PixelID is contained in a template parameter typelist.\nDefinition at line 183 of file sitkPixelIDValues.h.",
        "inputs": [
            {
                "name": "match",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "UnaryMinus:_image1": {
        "name": "UnaryMinus",
        "function_name": "UnaryMinus",
        "description": "Implements pixel-wise generic operation on one image.\n\\ This function directly calls the execute method of UnaryMinusImageFilter in order to support a procedural API\nSee also\nitk::simple::UnaryMinusImageFilter for the object oriented interface\nReferenced by operator-().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "UnsharpMask:_image1_sigmas_amount_threshold_clamp": {
        "name": "UnsharpMask",
        "function_name": "UnsharpMask",
        "description": "Edge enhancement filter.\n\\ This function directly calls the execute method of UnsharpMaskImageFilter in order to support a procedural API\nSee also\nitk::simple::UnsharpMaskImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "sigmas",
                "default": "",
                "type": "str"
            },
            {
                "name": "amount",
                "default": 0.5,
                "type": "float"
            },
            {
                "name": "threshold",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "clamp",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Unused:_": {
        "name": "Unused",
        "function_name": "Unused",
        "description": "A function which does nothing.\nThis function is to be used to mark parameters as unused to suppress compiler warning.\nDefinition at line 47 of file sitkTemplateFunctions.h.",
        "inputs": [
            {
                "name": "",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "ValuedRegionalMaxima:_image1_fullyConnected": {
        "name": "ValuedRegionalMaxima",
        "function_name": "ValuedRegionalMaxima",
        "description": "Transforms the image so that any pixel that is not a regional maxima is set to the minimum value for the pixel type. Pixels that are regional maxima retain their value.\n\\ This function directly calls the execute method of ValuedRegionalMaximaImageFilter in order to support a procedural API\nSee also\nitk::simple::ValuedRegionalMaximaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ValuedRegionalMinima:_image1_fullyConnected": {
        "name": "ValuedRegionalMinima",
        "function_name": "ValuedRegionalMinima",
        "description": "Transforms the image so that any pixel that is not a regional minima is set to the maximum value for the pixel type. Pixels that are regional minima retain their value.\n\\ This function directly calls the execute method of ValuedRegionalMinimaImageFilter in order to support a procedural API\nSee also\nitk::simple::ValuedRegionalMinimaImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VectorConfidenceConnected:_image1_seedList_numberOfIterations_multiplier_initialNeighborhoodRadius_replaceValue": {
        "name": "VectorConfidenceConnected",
        "function_name": "VectorConfidenceConnected",
        "description": "Segment pixels with similar statistics using connectivity.\n\\ This function directly calls the execute method of VectorConfidenceConnectedImageFilter in order to support a procedural API\nSee also\nitk::simple::VectorConfidenceConnectedImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "seedList",
                "default": "",
                "type": "str"
            },
            {
                "name": "numberOfIterations",
                "default": 4,
                "type": "int"
            },
            {
                "name": "multiplier",
                "default": 4.5,
                "type": "float"
            },
            {
                "name": "initialNeighborhoodRadius",
                "default": 1,
                "type": "int"
            },
            {
                "name": "replaceValue",
                "default": 1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VectorConnectedComponent:_image1_distanceThreshold_fullyConnected": {
        "name": "VectorConnectedComponent",
        "function_name": "VectorConnectedComponent",
        "description": "A connected components filter that labels the objects in a vector image. Two vectors are pointing similar directions if one minus their dot product is less than a threshold. Vectors that are 180 degrees out of phase are similar. Assumes that vectors are normalized.\n\\ This function directly calls the execute method of VectorConnectedComponentImageFilter in order to support a procedural API\nSee also\nitk::simple::VectorConnectedComponentImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "distanceThreshold",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "fullyConnected",
                "default": false,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VectorIndexSelectionCast:_image1_index_outputPixelType": {
        "name": "VectorIndexSelectionCast",
        "function_name": "VectorIndexSelectionCast",
        "description": "Extracts the selected index of the vector that is the input pixel type.\n\\ This function directly calls the execute method of VectorIndexSelectionCastImageFilter in order to support a procedural API\nSee also\nitk::simple::VectorIndexSelectionCastImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "index",
                "default": 0,
                "type": "int"
            },
            {
                "name": "outputPixelType",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VectorMagnitude:_image1": {
        "name": "VectorMagnitude",
        "function_name": "VectorMagnitude",
        "description": "Take an image of vectors as input and produce an image with the magnitude of those vectors.\n\\ This function directly calls the execute method of VectorMagnitudeImageFilter in order to support a procedural API\nSee also\nitk::simple::VectorMagnitudeImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VotingBinary:_image1_radius_birthThreshold_survivalThreshold_foregroundValue_backgroundValue": {
        "name": "VotingBinary",
        "function_name": "VotingBinary",
        "description": "Applies a voting operation in a neighborhood of each pixel.\n\\ This function directly calls the execute method of VotingBinaryImageFilter in order to support a procedural API\nSee also\nitk::simple::VotingBinaryImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "birthThreshold",
                "default": 1,
                "type": "int"
            },
            {
                "name": "survivalThreshold",
                "default": 1,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VotingBinaryHoleFilling:_image1_radius_majorityThreshold_foregroundValue_backgroundValue": {
        "name": "VotingBinaryHoleFilling",
        "function_name": "VotingBinaryHoleFilling",
        "description": "Fills in holes and cavities by applying a voting operation on each pixel.\n\\ This function directly calls the execute method of VotingBinaryHoleFillingImageFilter in order to support a procedural API\nSee also\nitk::simple::VotingBinaryHoleFillingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "majorityThreshold",
                "default": 1,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "VotingBinaryIterativeHoleFilling:_image1_radius_maximumNumberOfIterations_majorityThreshold_foregroundValue_backgroundValue": {
        "name": "VotingBinaryIterativeHoleFilling",
        "function_name": "VotingBinaryIterativeHoleFilling",
        "description": "Fills in holes and cavities by iteratively applying a voting operation.\n\\ This function directly calls the execute method of VotingBinaryIterativeHoleFillingImageFilter in order to support a procedural API\nSee also\nitk::simple::VotingBinaryIterativeHoleFillingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "radius",
                "default": "",
                "type": "str"
            },
            {
                "name": "maximumNumberOfIterations",
                "default": 10,
                "type": "int"
            },
            {
                "name": "majorityThreshold",
                "default": 1,
                "type": "int"
            },
            {
                "name": "foregroundValue",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "backgroundValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Warp:_image_displacementField_interpolator_outputSize_outputOrigin_outputSpacing_outputDirection_edgePaddingValue": {
        "name": "Warp",
        "function_name": "Warp",
        "description": "Warps an image using an input displacement field.\n\\ This function directly calls the execute method of WarpImageFilter in order to support a procedural API\nSee also\nitk::simple::WarpImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "displacementField",
                "default": "",
                "type": "Path"
            },
            {
                "name": "interpolator",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputSize",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputOrigin",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputSpacing",
                "default": "",
                "type": "str"
            },
            {
                "name": "outputDirection",
                "default": "",
                "type": "str"
            },
            {
                "name": "edgePaddingValue",
                "default": 0.0,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "WhiteTopHat:_image1_kernelRadius_kernelType_safeBorder": {
        "name": "WhiteTopHat",
        "function_name": "WhiteTopHat",
        "description": "White top hat extracts local maxima that are larger than the structuring element.\n\\ This function directly calls the execute method of WhiteTopHatImageFilter in order to support a procedural API\nSee also\nitk::simple::WhiteTopHatImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "kernelRadius",
                "default": "",
                "type": "str"
            },
            {
                "name": "kernelType",
                "default": "",
                "type": "str"
            },
            {
                "name": "safeBorder",
                "default": true,
                "type": "bool"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "WienerDeconvolution:_image1_image2_noiseVariance_normalize_boundaryCondition_outputRegionMode": {
        "name": "WienerDeconvolution",
        "function_name": "WienerDeconvolution",
        "description": "The Wiener deconvolution image filter is designed to restore an image convolved with a blurring kernel while keeping noise enhancement to a minimum.\n\\ This function directly calls the execute method of WienerDeconvolutionImageFilter in order to support a procedural API\nSee also\nitk::simple::WienerDeconvolutionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            },
            {
                "name": "noiseVariance",
                "default": 0.0,
                "type": "float"
            },
            {
                "name": "normalize",
                "default": false,
                "type": "bool"
            },
            {
                "name": "boundaryCondition",
                "default": "itk::simple::WienerDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
                "type": "Path"
            },
            {
                "name": "outputRegionMode",
                "default": "itk::simple::WienerDeconvolutionImageFilter::SAME",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "WrapPad:_image1_padLowerBound_padUpperBound": {
        "name": "WrapPad",
        "function_name": "WrapPad",
        "description": "Increase the image size by padding with replicants of the input image value.\n\\ This function directly calls the execute method of WrapPadImageFilter in order to support a procedural API\nSee also\nitk::simple::WrapPadImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "padLowerBound",
                "default": "",
                "type": "str"
            },
            {
                "name": "padUpperBound",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "WriteImage:_image_fileName_useCompression_compressionLevel": {
        "name": "WriteImage:_image_fileName_useCompression_compressionLevel",
        "function_name": "WriteImage",
        "description": "WriteImage is a procedural interface to the ImageFileWriter. class which is convenient for many image writing tasks.\nParameters\nimage\nthe input image to be written\nfileName\nthe filename of an Image e.g. \"cthead.mha\"\nuseCompression\nrequest to compress the written file\ncompressionLevel\na hint for the amount of compression to be applied during writing\nSee also\nitk::simple::ImageFileWriter for writing a single file.\nExamples\nCppCMake/Source/sitk_example.cxx, CppInPlace/CppInPlace.cxx, DicomSeriesReader/DicomSeriesReader.cxx, FastMarchingSegmentation/FastMarchingSegmentation.cxx, N4BiasFieldCorrection/N4BiasFieldCorrection.cxx, SimpleGaussianFunctional.cxx, SimpleIO/SimpleIO.cxx, and SliceBySliceDecorator/SliceBySliceDecorator.cxx.",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fileName",
                "default": "",
                "type": "str"
            },
            {
                "name": "useCompression",
                "default": false,
                "type": "bool"
            },
            {
                "name": "compressionLevel",
                "default": -1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "WriteImage:_image_fileNames_useCompression_compressionLevel": {
        "name": "WriteImage:_image_fileNames_useCompression_compressionLevel",
        "function_name": "WriteImage",
        "description": "WriteImage is a procedural interface to the ImageSeriesWriter. class which is convenient for many image writing tasks.\nParameters\nimage\nthe input image to be written\nfileNames\na vector of filenames of length equal to the number of slices in the image.\nuseCompression\nrequest to compress the written file\ncompressionLevel\na hint for the amount of compression to be applied during writing.\nSee also\nitk::simple::ImageFileWriter for writing a single file.",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "fileNames",
                "default": "",
                "type": "str"
            },
            {
                "name": "useCompression",
                "default": false,
                "type": "bool"
            },
            {
                "name": "compressionLevel",
                "default": -1,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "WriteParameterFile:_parameterMap_filename": {
        "name": "WriteParameterFile",
        "function_name": "WriteParameterFile",
        "description": "Examples\nElastix/elx.cxx.",
        "inputs": [
            {
                "name": "parameterMap",
                "default": "",
                "type": "str"
            },
            {
                "name": "filename",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "WriteTransform:_transform_filename": {
        "name": "WriteTransform",
        "function_name": "WriteTransform",
        "description": "Examples\nDemonsRegistration1/DemonsRegistration1.cxx, DemonsRegistration2/DemonsRegistration2.cxx, ImageRegistrationMethod1/ImageRegistrationMethod1.cxx, ImageRegistrationMethod2/ImageRegistrationMethod2.cxx, ImageRegistrationMethodBSpline1/ImageRegistrationMethodBSpline1.cxx, ImageRegistrationMethodBSpline3/ImageRegistrationMethodBSpline3.cxx, ImageRegistrationMethodDisplacement1/ImageRegistrationMethodDisplacement1.cxx, and SimpleIO/SimpleIO.cxx.",
        "inputs": [
            {
                "name": "transform",
                "default": "",
                "type": "Path"
            },
            {
                "name": "filename",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "transform",
                "description": "Output transform path",
                "type": "Path"
            }
        ]
    },
    "Xor:_image1_image2": {
        "name": "Xor:_image1_image2",
        "function_name": "Xor",
        "description": "Computes the XOR bitwise operator pixel-wise between two images.\n\\ This function directly calls the execute method of XorImageFilter in order to support a procedural API\nSee also\nitk::simple::XorImageFilter for the object oriented interface\nReferenced by operator^(), and operator^=().",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Xor:_image1_constant": {
        "name": "Xor:_image1_constant",
        "function_name": "Xor",
        "description": "",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "constant",
                "default": "",
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "Xor:_constant_image2": {
        "name": "Xor:_constant_image2",
        "function_name": "Xor",
        "description": "",
        "inputs": [
            {
                "name": "constant",
                "default": "",
                "type": "int"
            },
            {
                "name": "image2",
                "default": "",
                "type": "Path"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "YenThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "YenThreshold:_image_maskImage_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "YenThreshold",
        "description": "Threshold an image using the Yen Threshold.\n\\ This function directly calls the execute method of YenThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::YenThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "maskImage",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "YenThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue": {
        "name": "YenThreshold:_image_insideValue_outsideValue_numberOfHistogramBins_maskOutput_maskValue",
        "function_name": "YenThreshold",
        "description": "Threshold an image using the Yen Threshold.\n\\ This function directly calls the execute method of YenThresholdImageFilter in order to support a procedural API\nSee also\nitk::simple::YenThresholdImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image",
                "default": "",
                "type": "Path"
            },
            {
                "name": "insideValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "outsideValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "numberOfHistogramBins",
                "default": 256,
                "type": "int"
            },
            {
                "name": "maskOutput",
                "default": true,
                "type": "bool"
            },
            {
                "name": "maskValue",
                "default": 255,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ZeroCrossing:_image1_foregroundValue_backgroundValue": {
        "name": "ZeroCrossing",
        "function_name": "ZeroCrossing",
        "description": "This filter finds the closest pixel to the zero-crossings (sign changes) in a signed itk::Image .\n\\ This function directly calls the execute method of ZeroCrossingImageFilter in order to support a procedural API\nSee also\nitk::simple::ZeroCrossingImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ZeroCrossingBasedEdgeDetection:_image1_variance_foregroundValue_backgroundValue_maximumError": {
        "name": "ZeroCrossingBasedEdgeDetection",
        "function_name": "ZeroCrossingBasedEdgeDetection",
        "description": "This filter implements a zero-crossing based edge detector.\n\\ This function directly calls the execute method of ZeroCrossingBasedEdgeDetectionImageFilter in order to support a procedural API\nSee also\nitk::simple::ZeroCrossingBasedEdgeDetectionImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "variance",
                "default": 1.0,
                "type": "float"
            },
            {
                "name": "foregroundValue",
                "default": 1,
                "type": "int"
            },
            {
                "name": "backgroundValue",
                "default": 0,
                "type": "int"
            },
            {
                "name": "maximumError",
                "default": 0.1,
                "type": "float"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    },
    "ZeroFluxNeumannPad:_image1_padLowerBound_padUpperBound": {
        "name": "ZeroFluxNeumannPad",
        "function_name": "ZeroFluxNeumannPad",
        "description": "Increase the image size by padding according to the zero-flux Neumann boundary condition.\n\\ This function directly calls the execute method of ZeroFluxNeumannPadImageFilter in order to support a procedural API\nSee also\nitk::simple::ZeroFluxNeumannPadImageFilter for the object oriented interface",
        "inputs": [
            {
                "name": "image1",
                "default": "",
                "type": "Path"
            },
            {
                "name": "padLowerBound",
                "default": "",
                "type": "str"
            },
            {
                "name": "padUpperBound",
                "default": "",
                "type": "str"
            }
        ],
        "outputs": [
            {
                "name": "image",
                "description": "Output image path",
                "type": "Path"
            }
        ]
    }
}